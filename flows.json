[
    {
        "id": "c09b3ec8fbe100cb",
        "type": "tab",
        "label": "MQTT Levering og mottak",
        "disabled": false,
        "info": "her skal sensordataen komme inn",
        "env": []
    },
    {
        "id": "7961830b4675d30a",
        "type": "tab",
        "label": "API Requests og auth",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "462853278b652d10",
        "type": "tab",
        "label": "Hub Auth",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "ffaf32d3b2905d76",
        "type": "mqtt-broker",
        "name": "",
        "broker": "192.168.1.229",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "01acbed2d3ecc2db",
        "type": "tls-config",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "broker.crt",
        "keyname": "broker.key",
        "caname": "ca.crt",
        "servername": "",
        "verifyservercert": false,
        "alpnprotocol": ""
    },
    {
        "id": "58ffeb75cb860e3d",
        "type": "mqtt-broker",
        "name": "",
        "broker": "192.168.1.229",
        "port": "8883",
        "tls": "88c2522ba4061f5b",
        "clientid": "",
        "autoConnect": true,
        "usetls": true,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "126bcb5c88f1a2cb",
        "type": "tls-config",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "",
        "servername": "",
        "verifyservercert": true,
        "alpnprotocol": ""
    },
    {
        "id": "d1fb5a1c9120777e",
        "type": "mqtt-broker",
        "name": "",
        "broker": "",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "88c2522ba4061f5b",
        "type": "tls-config",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "broker.crt",
        "keyname": "broker.key",
        "caname": "ca.crt",
        "servername": "",
        "verifyservercert": true,
        "alpnprotocol": ""
    },
    {
        "id": "5d256af1cca285a4",
        "type": "global-config",
        "name": "global-config",
        "env": []
    },
    {
        "id": "090adf4983f213e9",
        "type": "tls-config",
        "name": "Insecure TLS",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "",
        "servername": "",
        "verifyservercert": false,
        "alpnprotocol": ""
    },
    {
        "id": "79163e4e80804d77",
        "type": "tls-config",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "broker.crt",
        "keyname": "broker.key",
        "caname": "ca.crt",
        "servername": "",
        "verifyservercert": false,
        "alpnprotocol": ""
    },
    {
        "id": "d215bc886961dc35",
        "type": "mqtt-broker",
        "name": "",
        "broker": "192.168.10.229",
        "port": "8883",
        "tls": "e09b4652cb72f237",
        "clientid": "",
        "autoConnect": true,
        "usetls": true,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "ccee20e86ea524f5",
        "type": "tls-config",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "",
        "servername": "",
        "verifyservercert": true,
        "alpnprotocol": ""
    },
    {
        "id": "885bdeda18e1a24a",
        "type": "mqtt-broker",
        "name": "",
        "broker": "",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "e09b4652cb72f237",
        "type": "tls-config",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "broker.crt",
        "keyname": "broker.key",
        "caname": "ca.crt",
        "servername": "",
        "verifyservercert": true,
        "alpnprotocol": ""
    },
    {
        "id": "9714c1b21ce551d9",
        "type": "tls-config",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "broker.crt",
        "keyname": "broker.key",
        "caname": "ca.crt",
        "servername": "",
        "verifyservercert": false,
        "alpnprotocol": ""
    },
    {
        "id": "442bf17f85d7bab9",
        "type": "mqtt-broker",
        "name": "",
        "broker": "192.168.10.229",
        "port": "8883",
        "tls": "b4f4efd2778c0ba1",
        "clientid": "",
        "autoConnect": true,
        "usetls": true,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "9b3f1c7a434e0fcd",
        "type": "tls-config",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "",
        "servername": "",
        "verifyservercert": true,
        "alpnprotocol": ""
    },
    {
        "id": "a94ebaf18bbf740d",
        "type": "mqtt-broker",
        "name": "",
        "broker": "",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "b4f4efd2778c0ba1",
        "type": "tls-config",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "broker.crt",
        "keyname": "broker.key",
        "caname": "ca.crt",
        "servername": "",
        "verifyservercert": true,
        "alpnprotocol": ""
    },
    {
        "id": "c5deead613c897f5",
        "type": "tls-config",
        "name": "test1",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "",
        "servername": "",
        "verifyservercert": false,
        "alpnprotocol": ""
    },
    {
        "id": "93597ad9fa450a41",
        "type": "inject",
        "z": "c09b3ec8fbe100cb",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"temperature\":25.5,\"humidity\":45.2,\"gas_resistance\":1000,\"pressure\":1012.3}",
        "payloadType": "json",
        "x": 130,
        "y": 60,
        "wires": [
            [
                "f8fdb23c3b2f3793"
            ]
        ]
    },
    {
        "id": "f8fdb23c3b2f3793",
        "type": "mqtt out",
        "z": "c09b3ec8fbe100cb",
        "name": "",
        "topic": "sensor/data",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "ffaf32d3b2905d76",
        "x": 330,
        "y": 60,
        "wires": []
    },
    {
        "id": "71997b9cd8aedb8d",
        "type": "comment",
        "z": "c09b3ec8fbe100cb",
        "name": "<- for testing ",
        "info": "",
        "x": 570,
        "y": 60,
        "wires": []
    },
    {
        "id": "a1fdd125387e55cc",
        "type": "mqtt in",
        "z": "c09b3ec8fbe100cb",
        "name": "",
        "topic": "app/alarmtime",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "ffaf32d3b2905d76",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 110,
        "y": 280,
        "wires": [
            [
                "1f96d15770c6ab68",
                "94af40b31f1eb541"
            ]
        ]
    },
    {
        "id": "1f96d15770c6ab68",
        "type": "debug",
        "z": "c09b3ec8fbe100cb",
        "name": "debug 8",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 380,
        "y": 200,
        "wires": []
    },
    {
        "id": "94af40b31f1eb541",
        "type": "mqtt out",
        "z": "c09b3ec8fbe100cb",
        "name": "",
        "topic": "esp32/alarmtime",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "ffaf32d3b2905d76",
        "x": 500,
        "y": 280,
        "wires": []
    },
    {
        "id": "3c7da7a3613be757",
        "type": "comment",
        "z": "c09b3ec8fbe100cb",
        "name": "<- fra app til esp32 alarmtid.",
        "info": "",
        "x": 920,
        "y": 320,
        "wires": []
    },
    {
        "id": "84f5c7b24ab1e958",
        "type": "mqtt in",
        "z": "c09b3ec8fbe100cb",
        "name": "",
        "topic": "app/alarmoff",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "ffaf32d3b2905d76",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 110,
        "y": 460,
        "wires": [
            [
                "032d7bf7060f6c60",
                "daeb74a487b4f48f"
            ]
        ]
    },
    {
        "id": "032d7bf7060f6c60",
        "type": "mqtt out",
        "z": "c09b3ec8fbe100cb",
        "name": "",
        "topic": "esp32/alarmoff",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "ffaf32d3b2905d76",
        "x": 380,
        "y": 460,
        "wires": []
    },
    {
        "id": "2c1fa85f6b4bbc6a",
        "type": "comment",
        "z": "c09b3ec8fbe100cb",
        "name": "Sku av alarm",
        "info": "",
        "x": 610,
        "y": 460,
        "wires": []
    },
    {
        "id": "daeb74a487b4f48f",
        "type": "debug",
        "z": "c09b3ec8fbe100cb",
        "name": "debug 12",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 360,
        "y": 360,
        "wires": []
    },
    {
        "id": "27acc53adb4c3e6b",
        "type": "inject",
        "z": "c09b3ec8fbe100cb",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{   \"temperature\": 22.5,   \"humidity\": 55 }",
        "payloadType": "json",
        "x": 130,
        "y": 620,
        "wires": [
            [
                "2503ebf419853f8b"
            ]
        ]
    },
    {
        "id": "2503ebf419853f8b",
        "type": "mqtt out",
        "z": "c09b3ec8fbe100cb",
        "name": "",
        "topic": "test/sensor",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "442bf17f85d7bab9",
        "x": 350,
        "y": 620,
        "wires": []
    },
    {
        "id": "3bb4959320715a1e",
        "type": "mqtt in",
        "z": "c09b3ec8fbe100cb",
        "name": "",
        "topic": "test/sensor",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "442bf17f85d7bab9",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 140,
        "y": 720,
        "wires": [
            [
                "0172d30ecff5843a"
            ]
        ]
    },
    {
        "id": "0172d30ecff5843a",
        "type": "debug",
        "z": "c09b3ec8fbe100cb",
        "name": "debug 13",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 300,
        "y": 720,
        "wires": []
    },
    {
        "id": "388af1b1cfc8df86",
        "type": "function",
        "z": "7961830b4675d30a",
        "name": "function 4",
        "func": "msg.payload =\"\";\nvar accessToken = global.get(\"AccessToken\");\n\n//msg.headers = {\n//    \"Authorization\" : accessToken\n// };\n// msg.headers = {};\n// msg.headers['Authorization'] = accessToken;\n\nmsg.headers = {\n    \"Content-Type\": \"application/json\",\n    \"Authorization\": \"Bearer \" + accessToken\n};\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 300,
        "wires": [
            [
                "1d909cec1f0b20b0",
                "81fee143d2f4f0dd"
            ]
        ]
    },
    {
        "id": "1d909cec1f0b20b0",
        "type": "http request",
        "z": "7961830b4675d30a",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://phoenixapi.bravebay-301dbe0c.norwayeast.azurecontainerapps.io/api/Authentication/hub-user-auth",
        "tls": "c5deead613c897f5",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 530,
        "y": 300,
        "wires": [
            [
                "78f25005762649c7",
                "a20837c651dd9b8e"
            ]
        ]
    },
    {
        "id": "78f25005762649c7",
        "type": "switch",
        "z": "7961830b4675d30a",
        "name": "API Response check",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "200",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "400",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "401",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "500",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 840,
        "y": 300,
        "wires": [
            [
                "5e958a3941210f6f"
            ],
            [
                "9e3c870062a9d685"
            ],
            [
                "9e3c870062a9d685"
            ],
            [
                "9e3c870062a9d685"
            ]
        ]
    },
    {
        "id": "a34b8f6637635c0a",
        "type": "comment",
        "z": "7961830b4675d30a",
        "name": "Først sende forespørsel fra app.",
        "info": "",
        "x": 150,
        "y": 200,
        "wires": []
    },
    {
        "id": "c66fb5e6b6e4fb18",
        "type": "mqtt in",
        "z": "7961830b4675d30a",
        "name": "",
        "topic": "App/auth",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "ffaf32d3b2905d76",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 160,
        "y": 300,
        "wires": [
            [
                "388af1b1cfc8df86"
            ]
        ]
    },
    {
        "id": "ae2810afe68ef70f",
        "type": "comment",
        "z": "7961830b4675d30a",
        "name": "setter payload tom og sender videre til api",
        "info": "",
        "x": 320,
        "y": 240,
        "wires": []
    },
    {
        "id": "f96b987d5896946a",
        "type": "comment",
        "z": "7961830b4675d30a",
        "name": "Sende Auth forespørsel til APIet. i formen Post for å sende data for authentisering",
        "info": "",
        "x": 580,
        "y": 160,
        "wires": []
    },
    {
        "id": "72fb4f4a9f9e6bb8",
        "type": "mqtt out",
        "z": "7961830b4675d30a",
        "name": "",
        "topic": "app/authresponds",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "ffaf32d3b2905d76",
        "x": 1450,
        "y": 360,
        "wires": []
    },
    {
        "id": "f42e4aa5b83b238f",
        "type": "comment",
        "z": "7961830b4675d30a",
        "name": "Switch for å catche om den feiler eller ikke:",
        "info": "",
        "x": 880,
        "y": 200,
        "wires": []
    },
    {
        "id": "b4d8aa30558c67e3",
        "type": "comment",
        "z": "7961830b4675d30a",
        "name": "ved feil sende responds.",
        "info": "",
        "x": 1130,
        "y": 460,
        "wires": []
    },
    {
        "id": "734e17510150fbfb",
        "type": "mqtt out",
        "z": "7961830b4675d30a",
        "name": "",
        "topic": "app/authresponse",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "ffaf32d3b2905d76",
        "x": 1670,
        "y": 280,
        "wires": []
    },
    {
        "id": "da8e98630daa1395",
        "type": "inject",
        "z": "7961830b4675d30a",
        "name": "Connect success!",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "statusCode",
                "v": "200",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"UserId\":\"123e4567-e89b-12d3-a456-426614174000\",\"TemporaryAuthToken\":\"8as7dyuaso\"}",
        "payloadType": "json",
        "x": 610,
        "y": 240,
        "wires": [
            [
                "78f25005762649c7"
            ]
        ]
    },
    {
        "id": "3f61c9cb072145c7",
        "type": "inject",
        "z": "7961830b4675d30a",
        "name": "Connection failed",
        "props": [
            {
                "p": "statusCode",
                "v": "400",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 600,
        "y": 360,
        "wires": [
            [
                "78f25005762649c7"
            ]
        ]
    },
    {
        "id": "9e3c870062a9d685",
        "type": "function",
        "z": "7961830b4675d30a",
        "name": "function 5",
        "func": "msg.payload = \"API failed to connect\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 320,
        "wires": [
            [
                "72fb4f4a9f9e6bb8"
            ]
        ]
    },
    {
        "id": "5e958a3941210f6f",
        "type": "function",
        "z": "7961830b4675d30a",
        "name": "lagre og sende userid",
        "func": "// Hent ut UserId og TemporaryAuthToken fra API-responsen\nvar userId = msg.payload.UserId; // Hent UserId fra responsen\nvar tempAuthToken = msg.payload.TemporaryAuthToken; // Hent TemporaryAuthToken fra responsen\n\n// Lagre UserId og TemporaryAuthToken i flow-kontekst for videre bruk\nflow.set(\"userId\", userId);\nflow.set(\"tempAuthToken\", tempAuthToken);\n\n// Skriv ut for å debugge (valgfritt)\nnode.warn(\"UserId lagret: \" + userId);\nnode.warn(\"TemporaryAuthToken lagret: \" + tempAuthToken);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1180,
        "y": 280,
        "wires": [
            [
                "0bf0877b5e660310",
                "9def8a5c032a092b"
            ]
        ]
    },
    {
        "id": "675dcc597243a38a",
        "type": "mqtt in",
        "z": "7961830b4675d30a",
        "name": "",
        "topic": "sensor/data",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "ffaf32d3b2905d76",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 150,
        "y": 700,
        "wires": [
            [
                "f57d5cb9dbfbe79e"
            ]
        ]
    },
    {
        "id": "f57d5cb9dbfbe79e",
        "type": "function",
        "z": "7961830b4675d30a",
        "name": "function 8",
        "func": "var accessToken = global.get(\"AccessToken\");\n\n// Hent sensorverdier fra payload\nvar temperature = msg.payload.temperature;\nvar humidity = msg.payload.humidity;\nvar gasResistance = msg.payload.gas_resistance;\nvar pressure = msg.payload.pressure;\n\n// Hent DeviceId fra flow-kontekst (UUID til devicen)\nvar deviceId = flow.get(\"deviceId\") || \"5fde4390-4119-4cf7-8188-7cd49a4b7ad2\"; // Eksempel UUID, erstatt med riktig ID\n\n// Sett opp dataene som skal sendes til API-et\nvar dataArray = [];\n\n// Legg til hvert målepunkt som et eget objekt for API-et\nif (temperature !== undefined) {\n    dataArray.push({\n        \"deviceId\": deviceId,\n        \"value\": temperature.toISOString(),\n        \"unit\": \"kg\",\n        \"dataType\": \"int\",\n        \"createdAt\": new Date().toISOString()\n    });\n}\n\nif (humidity !== undefined) {\n    dataArray.push({\n        \"deviceId\": deviceId,\n        \"value\": humidity.toISOString(),\n        \"unit\": \"m\",\n        \"dataType\": \"int\",\n        \"createdAt\": new Date().toISOString()\n    });\n}\n\nif (gasResistance !== undefined) {\n    dataArray.push({\n        \"deviceId\": deviceId,\n        \"Value\": gasResistance.toISOString(),\n        \"unit\": \"kg\",\n        \"dataType\": \"int\",\n        \"createdAt\": new Date().toISOString()\n    });\n}\n\nif (pressure !== undefined) {\n    dataArray.push({\n        \"deviceId\": deviceId,\n        \"value\": pressure.toISOString(),\n        \"unit\": \"hpa\",\n        \"dataType\": \"int\",\n        \"createdAt\": new Date().toISOString()\n    });\n}\n\n// Oppdater payload med dataArray for å sende til API-et\nmsg.payload = dataArray;\n\n// Legg til Authorization-header for API-forespørselen\nmsg.headers = {\n    \"Content-Type\": \"application/json\",\n    \"Authorization\": \"Bearer \" + accessToken\n};\n\n// Returner meldingen slik at den kan sendes videre til HTTP request-noden\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 700,
        "wires": [
            [
                "73e0ea68fb5cad08",
                "616c969a095e1386"
            ]
        ]
    },
    {
        "id": "73e0ea68fb5cad08",
        "type": "http request",
        "z": "7961830b4675d30a",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://phoenixapi.bravebay-301dbe0c.norwayeast.azurecontainerapps.io/api/DeviceData/sensor",
        "tls": "c5deead613c897f5",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 550,
        "y": 700,
        "wires": [
            [
                "b8632ac13f3ef2b9",
                "207d770388e82f2e"
            ]
        ]
    },
    {
        "id": "b8632ac13f3ef2b9",
        "type": "switch",
        "z": "7961830b4675d30a",
        "name": "API Response check",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "200",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "400",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "401",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "500",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 5,
        "x": 800,
        "y": 700,
        "wires": [
            [
                "ee6b5bcc32b638d8"
            ],
            [
                "65d80627b33cebad"
            ],
            [
                "65d80627b33cebad"
            ],
            [
                "65d80627b33cebad"
            ],
            [
                "65d80627b33cebad"
            ]
        ]
    },
    {
        "id": "68a9210d2f484d8b",
        "type": "inject",
        "z": "7961830b4675d30a",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"temperature\":25.5,\"humidity\":45.2,\"gas_resistance\":1000,\"pressure\":1012.3}",
        "payloadType": "json",
        "x": 630,
        "y": 60,
        "wires": [
            [
                "917de95f6a2f0117"
            ]
        ]
    },
    {
        "id": "917de95f6a2f0117",
        "type": "mqtt out",
        "z": "7961830b4675d30a",
        "name": "",
        "topic": "sensor/data",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "ffaf32d3b2905d76",
        "x": 830,
        "y": 60,
        "wires": []
    },
    {
        "id": "ae60478a57a62a57",
        "type": "comment",
        "z": "7961830b4675d30a",
        "name": "<- for testing ",
        "info": "",
        "x": 1070,
        "y": 60,
        "wires": []
    },
    {
        "id": "bcd2e27aa0c2afc1",
        "type": "inject",
        "z": "7961830b4675d30a",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"temperature\":25.5,\"humidity\":45.2,\"gas_resistance\":1000,\"pressure\":1012.3}",
        "payloadType": "json",
        "x": 1010,
        "y": 780,
        "wires": [
            [
                "65d80627b33cebad"
            ]
        ]
    },
    {
        "id": "6ff23c07582d54b1",
        "type": "file",
        "z": "7961830b4675d30a",
        "name": "",
        "filename": "/home/canor/Desktop/sensordata.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "utf8",
        "x": 1410,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "ee6b5bcc32b638d8",
        "type": "file in",
        "z": "7961830b4675d30a",
        "name": "",
        "filename": "/home/canor/Desktop/sensordata.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1130,
        "y": 660,
        "wires": [
            [
                "de5272de12a81843"
            ]
        ]
    },
    {
        "id": "de5272de12a81843",
        "type": "function",
        "z": "7961830b4675d30a",
        "name": "function 9",
        "func": "// Hent auth token fra flow-kontekst\nvar tempAuthToken = flow.get(\"tempAuthToken\");\n\nif (!tempAuthToken) {\n    node.error(\"No valid TemporaryAuthToken available\");\n    return null; // Avslutt flyten hvis token mangler\n}\n\n// Forsøk å parse hele filinnholdet som en JSON-array\nvar data = [];\ntry {\n    data = JSON.parse(msg.payload); // Anta at payload nå er en JSON-array\n    if (!Array.isArray(data)) {\n        node.error(\"Expected a JSON array, but got something else.\");\n        return null; // Avslutt flyten hvis innholdet ikke er en array\n    }\n} catch (e) {\n    node.error(\"Error parsing JSON: \" + e);\n    return null; // Avslutt flyten hvis parsing mislykkes\n}\n\n// Send hele listen med sensordata som én melding til API-et\nif (data.length > 0) {\n    var newMsg = RED.util.cloneMessage(msg);\n    newMsg.payload = data;\n\n    // Legg til Authorization-header for API-forespørselen\n    newMsg.headers = {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": \"Bearer \" + tempAuthToken\n    };\n\n    // Send hele datapakken videre som en melding\n    return newMsg;\n} else {\n    node.warn(\"No valid data found to send.\");\n    return null; // Avslutt flyten hvis ingen gyldige data er funnet\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1400,
        "y": 660,
        "wires": [
            [
                "b55ccc2e69323e3f"
            ]
        ]
    },
    {
        "id": "b55ccc2e69323e3f",
        "type": "http request",
        "z": "7961830b4675d30a",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1570,
        "y": 660,
        "wires": [
            [
                "1fe229673cc0de33"
            ]
        ]
    },
    {
        "id": "1fe229673cc0de33",
        "type": "switch",
        "z": "7961830b4675d30a",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "200",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1670,
        "y": 600,
        "wires": [
            [
                "dfdd263c87226c1b"
            ]
        ]
    },
    {
        "id": "1ec307fece149bec",
        "type": "comment",
        "z": "7961830b4675d30a",
        "name": "Sende data med auth",
        "info": "",
        "x": 340,
        "y": 640,
        "wires": []
    },
    {
        "id": "3e89ca0528e84fca",
        "type": "comment",
        "z": "7961830b4675d30a",
        "name": "Sjekker responds",
        "info": "",
        "x": 720,
        "y": 600,
        "wires": []
    },
    {
        "id": "f73bb22019c7ff7b",
        "type": "comment",
        "z": "7961830b4675d30a",
        "name": "Ved feil lagrer data lokalt",
        "info": "",
        "x": 1090,
        "y": 820,
        "wires": []
    },
    {
        "id": "648e0478c0569a08",
        "type": "comment",
        "z": "7961830b4675d30a",
        "name": "Ved konnect er data sendt og vi sjekker om vi har data lagret lokalt. sender dette med function9",
        "info": "",
        "x": 1180,
        "y": 560,
        "wires": []
    },
    {
        "id": "c8c596d4235b973b",
        "type": "comment",
        "z": "7961830b4675d30a",
        "name": "Sjekker responds igjen og hvis den er sendt sletter vi filen lokalt",
        "info": "",
        "x": 1870,
        "y": 740,
        "wires": []
    },
    {
        "id": "8c0b2e78935ad16a",
        "type": "comment",
        "z": "7961830b4675d30a",
        "name": "skal få svar med temp auth token + userID",
        "info": "",
        "x": 1120,
        "y": 240,
        "wires": []
    },
    {
        "id": "0bf0877b5e660310",
        "type": "function",
        "z": "7961830b4675d30a",
        "name": "function 11",
        "func": "msg.payload = \"API connected og authenticated\";\n\nnode.warn(\"API connected og authenticated\");\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1470,
        "y": 240,
        "wires": [
            [
                "734e17510150fbfb"
            ]
        ]
    },
    {
        "id": "ffea32d3055f3f5a",
        "type": "comment",
        "z": "7961830b4675d30a",
        "name": "sjekker svar og sender til app",
        "info": "",
        "x": 1560,
        "y": 140,
        "wires": []
    },
    {
        "id": "805be960ed2b36a9",
        "type": "mqtt in",
        "z": "7961830b4675d30a",
        "name": "",
        "topic": "app/HistoryRequest",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "ffaf32d3b2905d76",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 130,
        "y": 1040,
        "wires": [
            [
                "ad93d20ec82f19cd",
                "d5b637bd3a3311a5"
            ]
        ]
    },
    {
        "id": "ad93d20ec82f19cd",
        "type": "function",
        "z": "7961830b4675d30a",
        "name": "function 12",
        "func": "// Hent TemporaryAuthToken fra flow-konteksten\nvar tempAuthToken = flow.get(\"tempAuthToken\");\n\nif (!tempAuthToken) {\n    node.error(\"No valid TemporaryAuthToken available\");\n    return null; // Avslutt flyten hvis token mangler\n}\n\n// Sett opp payload og headers for API-forespørselen\nmsg.headers = {\n    \"Content-Type\": \"application/json\",\n    \"Authorization\": \"Bearer \" + tempAuthToken\n};\n\n// Bruker msg.payload til å definere spørringen (valgfritt)\nmsg.payload = {\n    \"query\": \"simple_query_for_data\" // Kan tilpasses med f.eks. tidsramme eller sensor-id\n};\n\n// Angi API URL for å hente historikk\nmsg.url = \"http://api.yourserver.com/sensor/history\"; // Bytt til riktig API-endepunkt\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1040,
        "wires": [
            [
                "cce0a19506de841c"
            ]
        ]
    },
    {
        "id": "0915e0b193ae19e4",
        "type": "switch",
        "z": "7961830b4675d30a",
        "name": "API Response check",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "200",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "400",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "401",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "500",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 780,
        "y": 1040,
        "wires": [
            [
                "09230f2933a9e02c"
            ],
            [
                "12f6b02a94a73496"
            ],
            [
                "12f6b02a94a73496"
            ],
            [
                "12f6b02a94a73496"
            ]
        ]
    },
    {
        "id": "cce0a19506de841c",
        "type": "http request",
        "z": "7961830b4675d30a",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 550,
        "y": 1040,
        "wires": [
            [
                "0915e0b193ae19e4"
            ]
        ]
    },
    {
        "id": "09230f2933a9e02c",
        "type": "function",
        "z": "7961830b4675d30a",
        "name": "function 13",
        "func": "var response = msg.payload;\n\n// Hvis response er et enkelt objekt, pakk det inn i en liste for å kunne bruke map()\nif (!Array.isArray(response)) {\n    response = [response];\n}\n\nvar formattedData = response.map(function(record) {\n    return {\n        timestamp: record.CreatedAt,\n        deviceId: record.DeviceId,\n        dataType: record.DataType,\n        value: record.Value,\n        unit: record.Unit\n    };\n});\n\nmsg.payload = formattedData;  // Oppdater payload med den formaterte dataen\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 1020,
        "wires": [
            [
                "21b6a8f58033fbf4",
                "4a86fa1b603db027"
            ]
        ]
    },
    {
        "id": "21b6a8f58033fbf4",
        "type": "mqtt out",
        "z": "7961830b4675d30a",
        "name": "",
        "topic": "app/HistoryResponse",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "ffaf32d3b2905d76",
        "x": 1320,
        "y": 1000,
        "wires": []
    },
    {
        "id": "12f6b02a94a73496",
        "type": "function",
        "z": "7961830b4675d30a",
        "name": "function 14",
        "func": "msg.payload = \"API Failed to respond\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 1060,
        "wires": [
            [
                "62a85737f4bf4a53"
            ]
        ]
    },
    {
        "id": "62a85737f4bf4a53",
        "type": "mqtt out",
        "z": "7961830b4675d30a",
        "name": "",
        "topic": "app/HistoryResponse",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "ffaf32d3b2905d76",
        "x": 1280,
        "y": 1080,
        "wires": []
    },
    {
        "id": "3c0be8e12dc42fd0",
        "type": "inject",
        "z": "7961830b4675d30a",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 870,
        "y": 620,
        "wires": [
            [
                "ee6b5bcc32b638d8"
            ]
        ]
    },
    {
        "id": "dfdd263c87226c1b",
        "type": "exec",
        "z": "7961830b4675d30a",
        "command": "rm /home/canor/Desktop/sensordata.json",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 1860,
        "y": 660,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "0124e3b0f6898b03",
        "type": "comment",
        "z": "7961830b4675d30a",
        "name": "Sletter filen for lagring av data. Må samsvare med de andre lagringene",
        "info": "",
        "x": 1910,
        "y": 560,
        "wires": []
    },
    {
        "id": "3f4f712f4d69db3e",
        "type": "comment",
        "z": "7961830b4675d30a",
        "name": "Spørring til Database:",
        "info": "",
        "x": 340,
        "y": 960,
        "wires": []
    },
    {
        "id": "468e4df45c2a749c",
        "type": "comment",
        "z": "7961830b4675d30a",
        "name": "Svar som må bli omgjort til noe appen kan bruke",
        "info": "",
        "x": 1020,
        "y": 920,
        "wires": []
    },
    {
        "id": "65d80627b33cebad",
        "type": "function",
        "z": "7961830b4675d30a",
        "name": "function 15",
        "func": "// Her kan du sette UUID for DeviceId, dette bør være unikt for hvert sensor-device.\nvar deviceId = flow.get(\"deviceId\") || \"123e4567-e89b-12d3-a456-426614174000\"; // Hentet fra flow kontekst eller hardkodet\n\n// Sett opp en array for å holde transformerte data\nvar dataArray = [];\n\n// Transformere hver av de innkommende verdiene til API-formatet\nvar dataTypes = [\n  { name: \"temperature\", unit: \"Celsius\", dataType: \"numeric\" },\n  { name: \"humidity\", unit: \"Percent\", dataType: \"numeric\" },\n  { name: \"gas_resistance\", unit: \"Ohms\", dataType: \"numeric\" },\n  { name: \"pressure\", unit: \"hPa\", dataType: \"numeric\" }\n];\n\ndataTypes.forEach(function(item) {\n  if (msg.payload[item.name] !== undefined) {\n    dataArray.push({\n      \"DeviceId\": deviceId,\n      \"Value\": msg.payload[item.name],\n      \"Unit\": item.unit,\n      \"DataType\": item.dataType,\n      \"CreatedAt\": new Date().toISOString()\n    });\n  }\n});\n\n// Oppdatere payload med det nye formatet (hvis API-et forventer batch, sender vi hele dataArray)\nmsg.payload = dataArray;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1130,
        "y": 720,
        "wires": [
            [
                "6ff23c07582d54b1",
                "4801e2d148d0b9b9"
            ]
        ]
    },
    {
        "id": "4801e2d148d0b9b9",
        "type": "debug",
        "z": "7961830b4675d30a",
        "name": "debug 26",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1300,
        "y": 820,
        "wires": []
    },
    {
        "id": "207d770388e82f2e",
        "type": "debug",
        "z": "7961830b4675d30a",
        "name": "debug 27",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 680,
        "y": 780,
        "wires": []
    },
    {
        "id": "d5b637bd3a3311a5",
        "type": "debug",
        "z": "7961830b4675d30a",
        "name": "debug 28",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 360,
        "y": 1120,
        "wires": []
    },
    {
        "id": "d43a8f0fb0cc5697",
        "type": "inject",
        "z": "7961830b4675d30a",
        "name": "Test data for test",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[   {     \"CreatedAt\": \"2024-11-15T14:30:00Z\",     \"DeviceId\": \"123e4567-e89b-12d3-a456-426614174000\",     \"DataType\": \"temperature\",     \"Value\": 22.5,     \"Unit\": \"Celsius\"   },   {     \"CreatedAt\": \"2024-11-15T15:00:00Z\",     \"DeviceId\": \"123e4567-e89b-12d3-a456-426614174000\",     \"DataType\": \"humidity\",     \"Value\": 55,     \"Unit\": \"Percent\"   },   {     \"CreatedAt\": \"2024-11-15T15:15:00Z\",     \"DeviceId\": \"123e4567-e89b-12d3-a456-426614174000\",     \"DataType\": \"pressure\",     \"Value\": 1013,     \"Unit\": \"hPa\"   },   {     \"CreatedAt\": \"2024-11-15T15:30:00Z\",     \"DeviceId\": \"123e4567-e89b-12d3-a456-426614174001\",     \"DataType\": \"gas_resistance\",     \"Value\": 220,     \"Unit\": \"Ohms\"   } ]",
        "payloadType": "json",
        "x": 840,
        "y": 960,
        "wires": [
            [
                "09230f2933a9e02c"
            ]
        ]
    },
    {
        "id": "4a86fa1b603db027",
        "type": "debug",
        "z": "7961830b4675d30a",
        "name": "debug 29",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1100,
        "y": 960,
        "wires": []
    },
    {
        "id": "1ff90ff21f849b78",
        "type": "inject",
        "z": "7961830b4675d30a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 900,
        "y": 1160,
        "wires": [
            [
                "12f6b02a94a73496"
            ]
        ]
    },
    {
        "id": "9def8a5c032a092b",
        "type": "debug",
        "z": "7961830b4675d30a",
        "name": "debug 30",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1460,
        "y": 200,
        "wires": []
    },
    {
        "id": "81fee143d2f4f0dd",
        "type": "debug",
        "z": "7961830b4675d30a",
        "name": "debug 32",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "headers",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 400,
        "y": 420,
        "wires": []
    },
    {
        "id": "a20837c651dd9b8e",
        "type": "debug",
        "z": "7961830b4675d30a",
        "name": "debug 33",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 440,
        "wires": []
    },
    {
        "id": "616c969a095e1386",
        "type": "debug",
        "z": "7961830b4675d30a",
        "name": "debug 34",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 460,
        "y": 800,
        "wires": []
    },
    {
        "id": "8c0b49d3dc192ebd",
        "type": "http request",
        "z": "462853278b652d10",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "query",
        "url": "https://phoenixapi.bravebay-301dbe0c.norwayeast.azurecontainerapps.io/api/Authentication/hub-credentials",
        "tls": "c5deead613c897f5",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": true,
        "headers": [],
        "x": 430,
        "y": 260,
        "wires": [
            [
                "ecfdb6a1bb8aea0d",
                "237ca79c1692c854"
            ]
        ]
    },
    {
        "id": "e36afa1551e8fd2c",
        "type": "inject",
        "z": "462853278b652d10",
        "name": "Inject hubId",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"hubId\": \"309d1761-657a-4005-bbb7-05dc1a77cba3\"}",
        "payloadType": "json",
        "x": 190,
        "y": 260,
        "wires": [
            [
                "8c0b49d3dc192ebd"
            ]
        ]
    },
    {
        "id": "ecfdb6a1bb8aea0d",
        "type": "debug",
        "z": "462853278b652d10",
        "name": "debug 21",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 620,
        "y": 380,
        "wires": []
    },
    {
        "id": "fc23ba07891cf5f1",
        "type": "comment",
        "z": "462853278b652d10",
        "name": "Setup!",
        "info": "On setup!\ngets clientid and secret, needs to be stored!",
        "x": 430,
        "y": 200,
        "wires": []
    },
    {
        "id": "71a8f7a489946738",
        "type": "catch",
        "z": "462853278b652d10",
        "name": "",
        "scope": [
            "8c0b49d3dc192ebd"
        ],
        "uncaught": false,
        "x": 1070,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "237ca79c1692c854",
        "type": "function",
        "z": "462853278b652d10",
        "name": "Store ClientId & Secret",
        "func": "var clientId = msg.payload.clientId;\nvar clientSecret = msg.payload.clientSecret;\n\nglobal.set(\"ClientId\", clientId);\nglobal.set(\"ClientSecret\", clientSecret);\n\n\nvar message = clientId + \" \" + clientSecret;\n\nmsg.payload = message;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 260,
        "wires": [
            [
                "7fda0e08d861f0ea",
                "66a0226902d9af85"
            ]
        ]
    },
    {
        "id": "d4faf93d50b5b123",
        "type": "inject",
        "z": "462853278b652d10",
        "name": "Inject clientId & Secret",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"clientId\":\"6960c77b-1866-4623-b9c4-1eaa30202f98\",\"clientSecret\":\"92dd2623-b7d5-418b-be53-ff0217aaf69f\"}",
        "payloadType": "json",
        "x": 140,
        "y": 580,
        "wires": [
            [
                "a6a3dcc4fa76b280"
            ]
        ]
    },
    {
        "id": "80ff8af41bc9acbe",
        "type": "comment",
        "z": "462853278b652d10",
        "name": "Auth Login!",
        "info": "",
        "x": 390,
        "y": 500,
        "wires": []
    },
    {
        "id": "a6a3dcc4fa76b280",
        "type": "http request",
        "z": "462853278b652d10",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://phoenixapi.bravebay-301dbe0c.norwayeast.azurecontainerapps.io/api/Authentication/login?isHub=true",
        "tls": "c5deead613c897f5",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": true,
        "headers": [],
        "x": 490,
        "y": 580,
        "wires": [
            [
                "5f4ce22a92e41497",
                "afc47921961120c2"
            ]
        ]
    },
    {
        "id": "5f4ce22a92e41497",
        "type": "debug",
        "z": "462853278b652d10",
        "name": "debug 22",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 700,
        "y": 680,
        "wires": []
    },
    {
        "id": "afc47921961120c2",
        "type": "function",
        "z": "462853278b652d10",
        "name": "Collect accessToken And store",
        "func": "var accessToken = msg.payload.accessToken;\n\nglobal.set(\"AccessToken\", accessToken);\nnode.warn (accessToken);\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 580,
        "wires": [
            [
                "00c13c97de6de1dd"
            ]
        ]
    },
    {
        "id": "87555ae5d0ad7e7a",
        "type": "function",
        "z": "462853278b652d10",
        "name": "Get ClientId and Secret from file",
        "func": "var client = {\n    \"clientId\": global.get(\"ClientId\"),\n    \"clientSecret\": global.get(\"ClientSecret\")\n};\n\n\n\nmsg.payload = client;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 740,
        "wires": [
            [
                "a6a3dcc4fa76b280",
                "22bd80639dd9b598"
            ]
        ]
    },
    {
        "id": "2c0c083f3e690ac0",
        "type": "inject",
        "z": "462853278b652d10",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1170,
        "y": 160,
        "wires": [
            [
                "f87d3ce620c6f2d6"
            ]
        ]
    },
    {
        "id": "9fc54762e3914c6e",
        "type": "debug",
        "z": "462853278b652d10",
        "name": "debug 23",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1620,
        "y": 220,
        "wires": []
    },
    {
        "id": "81c769b4b0d6bb98",
        "type": "link in",
        "z": "462853278b652d10",
        "name": "Auth Login",
        "links": [],
        "x": 65,
        "y": 740,
        "wires": [
            [
                "87555ae5d0ad7e7a"
            ]
        ]
    },
    {
        "id": "f87d3ce620c6f2d6",
        "type": "link call",
        "z": "462853278b652d10",
        "name": "Test",
        "links": [
            "81c769b4b0d6bb98"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 1370,
        "y": 180,
        "wires": [
            [
                "9fc54762e3914c6e"
            ]
        ]
    },
    {
        "id": "00c13c97de6de1dd",
        "type": "link out",
        "z": "462853278b652d10",
        "name": "auth Login",
        "mode": "return",
        "links": [],
        "x": 1085,
        "y": 580,
        "wires": []
    },
    {
        "id": "22bd80639dd9b598",
        "type": "debug",
        "z": "462853278b652d10",
        "name": "debug 24",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 700,
        "y": 800,
        "wires": []
    },
    {
        "id": "7fda0e08d861f0ea",
        "type": "debug",
        "z": "462853278b652d10",
        "name": "debug 25",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 960,
        "y": 340,
        "wires": []
    },
    {
        "id": "b718d7973e260563",
        "type": "comment",
        "z": "462853278b652d10",
        "name": "Example usage to login",
        "info": "",
        "x": 1380,
        "y": 100,
        "wires": []
    },
    {
        "id": "66a0226902d9af85",
        "type": "file",
        "z": "462853278b652d10",
        "name": "",
        "filename": "/home/canor/Desktop/ClientIDSecret",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 1050,
        "y": 260,
        "wires": [
            []
        ]
    }
]