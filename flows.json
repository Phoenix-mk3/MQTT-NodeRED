[
    {
        "id": "02fe833f20764a91",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "b2077c04dd8247ed",
        "type": "tab",
        "label": "MQTT Levering og mottak",
        "disabled": false,
        "info": "her skal sensordataen komme inn",
        "env": []
    },
    {
        "id": "4849650de0ff6e7f",
        "type": "tab",
        "label": "API Requests og auth",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "48444936cd495fbf",
        "type": "tab",
        "label": "Hub Auth",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "ffaf32d3b2905d76",
        "type": "mqtt-broker",
        "name": "",
        "broker": "192.168.10.229",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "87f65426d199218e",
        "type": "global-config",
        "name": "global-config",
        "env": []
    },
    {
        "id": "97ca6781ab28eb2e",
        "type": "tls-config",
        "name": "Insecure TLS",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "",
        "servername": "",
        "verifyservercert": false,
        "alpnprotocol": ""
    },
    {
        "id": "b063e4d4be8ace27",
        "type": "tls-config",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "broker.crt",
        "keyname": "broker.key",
        "caname": "ca.crt",
        "servername": "",
        "verifyservercert": false,
        "alpnprotocol": ""
    },
    {
        "id": "142ee3a212785e7f",
        "type": "mqtt-broker",
        "name": "",
        "broker": "192.168.10.229",
        "port": "8883",
        "tls": "6a3aa8846e16e9d8",
        "clientid": "",
        "autoConnect": true,
        "usetls": true,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "15510c18bdefd9d6",
        "type": "tls-config",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "",
        "servername": "",
        "verifyservercert": true,
        "alpnprotocol": ""
    },
    {
        "id": "918c9be8a863dfd5",
        "type": "mqtt-broker",
        "name": "",
        "broker": "",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "6a3aa8846e16e9d8",
        "type": "tls-config",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "broker.crt",
        "keyname": "broker.key",
        "caname": "ca.crt",
        "servername": "",
        "verifyservercert": true,
        "alpnprotocol": ""
    },
    {
        "id": "2a8fd11a12707e39",
        "type": "tls-config",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "broker.crt",
        "keyname": "broker.key",
        "caname": "ca.crt",
        "servername": "",
        "verifyservercert": false,
        "alpnprotocol": ""
    },
    {
        "id": "7f019286456d685d",
        "type": "mqtt-broker",
        "name": "",
        "broker": "192.168.10.229",
        "port": "8883",
        "tls": "62bb5bdf992414f7",
        "clientid": "",
        "autoConnect": true,
        "usetls": true,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "c009e66b5cc569a5",
        "type": "tls-config",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "",
        "servername": "",
        "verifyservercert": true,
        "alpnprotocol": ""
    },
    {
        "id": "ef754c2251b5a630",
        "type": "mqtt-broker",
        "name": "",
        "broker": "",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "62bb5bdf992414f7",
        "type": "tls-config",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "broker.crt",
        "keyname": "broker.key",
        "caname": "ca.crt",
        "servername": "",
        "verifyservercert": true,
        "alpnprotocol": ""
    },
    {
        "id": "29cf605083afc9f5",
        "type": "tls-config",
        "name": "test1",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "",
        "servername": "",
        "verifyservercert": false,
        "alpnprotocol": ""
    },
    {
        "id": "12018b57370b812b",
        "type": "inject",
        "z": "b2077c04dd8247ed",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"temperature\":25.5,\"humidity\":45.2,\"gas_resistance\":1000,\"pressure\":1012.3}",
        "payloadType": "json",
        "x": 130,
        "y": 60,
        "wires": [
            [
                "51344fe6d9f9d1ec"
            ]
        ]
    },
    {
        "id": "51344fe6d9f9d1ec",
        "type": "mqtt out",
        "z": "b2077c04dd8247ed",
        "name": "",
        "topic": "sensor/data",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "ffaf32d3b2905d76",
        "x": 330,
        "y": 60,
        "wires": []
    },
    {
        "id": "4a78938ee17e1670",
        "type": "comment",
        "z": "b2077c04dd8247ed",
        "name": "<- for testing ",
        "info": "",
        "x": 570,
        "y": 60,
        "wires": []
    },
    {
        "id": "ea8b140e6e8056ea",
        "type": "mqtt in",
        "z": "b2077c04dd8247ed",
        "name": "",
        "topic": "app/alarmtime",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "ffaf32d3b2905d76",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 110,
        "y": 320,
        "wires": [
            [
                "6b5d5ade01211dbc",
                "054ae3bce2512aae"
            ]
        ]
    },
    {
        "id": "6b5d5ade01211dbc",
        "type": "debug",
        "z": "b2077c04dd8247ed",
        "name": "debug 8",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 380,
        "y": 240,
        "wires": []
    },
    {
        "id": "054ae3bce2512aae",
        "type": "function",
        "z": "b2077c04dd8247ed",
        "name": "Function 1",
        "func": "// Hent meldingen (f.eks. \"16:20\")\nvar alarmTime = msg.payload;\n\n// Splitter \"hh:mm\" til timer og minutter\nvar parts = alarmTime.split(\":\");\nvar hours = parseInt(parts[0]);\nvar minutes = parseInt(parts[1]);\n\n// Konverter til millisekunder fra midnatt\nvar alarmMillis = (hours * 3600000) + (minutes * 60000);\n\n// Oppdater meldingen med den nye verdien i millisekunder\nmsg.payload = alarmMillis;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 320,
        "wires": [
            [
                "af159673f5cc31e8",
                "996f650d0e86b27c"
            ]
        ]
    },
    {
        "id": "af159673f5cc31e8",
        "type": "mqtt out",
        "z": "b2077c04dd8247ed",
        "name": "",
        "topic": "esp32/alarmtime",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "ffaf32d3b2905d76",
        "x": 670,
        "y": 320,
        "wires": []
    },
    {
        "id": "996f650d0e86b27c",
        "type": "debug",
        "z": "b2077c04dd8247ed",
        "name": "debug 9",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 620,
        "y": 240,
        "wires": []
    },
    {
        "id": "28b6a2297c938d75",
        "type": "comment",
        "z": "b2077c04dd8247ed",
        "name": "<- fra app til esp32 alarmtid.",
        "info": "",
        "x": 980,
        "y": 320,
        "wires": []
    },
    {
        "id": "1b2176e9259a81ec",
        "type": "mqtt in",
        "z": "b2077c04dd8247ed",
        "name": "",
        "topic": "app/alarmoff",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "ffaf32d3b2905d76",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 90,
        "y": 520,
        "wires": [
            [
                "0f83da2de529fe56",
                "dff65d88a9bdc575"
            ]
        ]
    },
    {
        "id": "0f83da2de529fe56",
        "type": "mqtt out",
        "z": "b2077c04dd8247ed",
        "name": "",
        "topic": "esp32/alarmoff",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "ffaf32d3b2905d76",
        "x": 360,
        "y": 520,
        "wires": []
    },
    {
        "id": "fc5b38e9722deb0f",
        "type": "comment",
        "z": "b2077c04dd8247ed",
        "name": "Sku av alarm",
        "info": "",
        "x": 570,
        "y": 520,
        "wires": []
    },
    {
        "id": "dff65d88a9bdc575",
        "type": "debug",
        "z": "b2077c04dd8247ed",
        "name": "debug 12",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 340,
        "y": 420,
        "wires": []
    },
    {
        "id": "2b684b0d6c62b625",
        "type": "inject",
        "z": "b2077c04dd8247ed",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{   \"temperature\": 22.5,   \"humidity\": 55 }",
        "payloadType": "json",
        "x": 110,
        "y": 620,
        "wires": [
            [
                "e6fb21be8e0303f0"
            ]
        ]
    },
    {
        "id": "e6fb21be8e0303f0",
        "type": "mqtt out",
        "z": "b2077c04dd8247ed",
        "name": "",
        "topic": "test/sensor",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "7f019286456d685d",
        "x": 330,
        "y": 620,
        "wires": []
    },
    {
        "id": "0a1aa3b52ed0dabc",
        "type": "mqtt in",
        "z": "b2077c04dd8247ed",
        "name": "",
        "topic": "test/sensor",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "7f019286456d685d",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 140,
        "y": 720,
        "wires": [
            [
                "cde53149cb08c990"
            ]
        ]
    },
    {
        "id": "cde53149cb08c990",
        "type": "debug",
        "z": "b2077c04dd8247ed",
        "name": "debug 13",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 300,
        "y": 720,
        "wires": []
    },
    {
        "id": "8c2d70f62883a815",
        "type": "function",
        "z": "4849650de0ff6e7f",
        "name": "function 4",
        "func": "var requestData = {\n    \"UserId\": msg.payload.UserId\n};\nmsg.payload = requestData;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 300,
        "wires": [
            [
                "0a7d031f22638394",
                "30adbe9a7e3f6a1e"
            ]
        ]
    },
    {
        "id": "0a7d031f22638394",
        "type": "http request",
        "z": "4849650de0ff6e7f",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "body",
        "url": "https://localhost:7142/api/Authentication/hub-user-auth",
        "tls": "29cf605083afc9f5",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 550,
        "y": 300,
        "wires": [
            [
                "41a7687079e63fd0"
            ]
        ]
    },
    {
        "id": "41a7687079e63fd0",
        "type": "switch",
        "z": "4849650de0ff6e7f",
        "name": "API Response check",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "200",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "400",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "401",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "500",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 840,
        "y": 300,
        "wires": [
            [
                "24a04d26295cb563"
            ],
            [
                "e8f579532870e99d"
            ],
            [
                "e8f579532870e99d"
            ],
            [
                "e8f579532870e99d"
            ]
        ]
    },
    {
        "id": "efb4e4a259b25130",
        "type": "comment",
        "z": "4849650de0ff6e7f",
        "name": "Først sende forespørsel fra app.",
        "info": "",
        "x": 150,
        "y": 220,
        "wires": []
    },
    {
        "id": "447ededfd90e6524",
        "type": "mqtt in",
        "z": "4849650de0ff6e7f",
        "name": "",
        "topic": "App/auth",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "ffaf32d3b2905d76",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 160,
        "y": 300,
        "wires": [
            [
                "8c2d70f62883a815",
                "d41f1cd97ef7b9ab"
            ]
        ]
    },
    {
        "id": "53366957dbf45c61",
        "type": "comment",
        "z": "4849650de0ff6e7f",
        "name": "setter payload tom og sender videre til api",
        "info": "",
        "x": 320,
        "y": 260,
        "wires": []
    },
    {
        "id": "41e9003053f8da50",
        "type": "comment",
        "z": "4849650de0ff6e7f",
        "name": "Sende Auth forespørsel til APIet. i formen Post for å sende data for authentisering",
        "info": "",
        "x": 580,
        "y": 160,
        "wires": []
    },
    {
        "id": "fad25a11a6b37096",
        "type": "mqtt out",
        "z": "4849650de0ff6e7f",
        "name": "",
        "topic": "app/authresponds",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "ffaf32d3b2905d76",
        "x": 1390,
        "y": 380,
        "wires": []
    },
    {
        "id": "a59188b435c2f88b",
        "type": "comment",
        "z": "4849650de0ff6e7f",
        "name": "Switch for å catche om den feiler eller ikke:",
        "info": "",
        "x": 880,
        "y": 200,
        "wires": []
    },
    {
        "id": "ad470cf18d4bb053",
        "type": "comment",
        "z": "4849650de0ff6e7f",
        "name": "ved feil sende responds.",
        "info": "",
        "x": 1130,
        "y": 460,
        "wires": []
    },
    {
        "id": "563ebc1566277ddd",
        "type": "mqtt out",
        "z": "4849650de0ff6e7f",
        "name": "",
        "topic": "app/authresponds",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "ffaf32d3b2905d76",
        "x": 1710,
        "y": 260,
        "wires": []
    },
    {
        "id": "d41f1cd97ef7b9ab",
        "type": "debug",
        "z": "4849650de0ff6e7f",
        "name": "debug 14",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 320,
        "y": 360,
        "wires": []
    },
    {
        "id": "30adbe9a7e3f6a1e",
        "type": "debug",
        "z": "4849650de0ff6e7f",
        "name": "debug 15",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 520,
        "y": 360,
        "wires": []
    },
    {
        "id": "5db250042de0499b",
        "type": "inject",
        "z": "4849650de0ff6e7f",
        "name": "Connect success!",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{    \"UserId\": \"123e4567-e89b-12d3-a456-426614174000\",    \"TemporaryAuthToken\": \"your_auth_token_here\" }",
        "payloadType": "json",
        "x": 610,
        "y": 240,
        "wires": [
            [
                "41a7687079e63fd0"
            ]
        ]
    },
    {
        "id": "6b335c983937010a",
        "type": "inject",
        "z": "4849650de0ff6e7f",
        "name": "Connection failed",
        "props": [
            {
                "p": "statusCode",
                "v": "400",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 620,
        "y": 420,
        "wires": [
            [
                "41a7687079e63fd0"
            ]
        ]
    },
    {
        "id": "e8f579532870e99d",
        "type": "function",
        "z": "4849650de0ff6e7f",
        "name": "function 5",
        "func": "msg.payload = \"API failed to connect\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 400,
        "wires": [
            [
                "fad25a11a6b37096"
            ]
        ]
    },
    {
        "id": "24a04d26295cb563",
        "type": "function",
        "z": "4849650de0ff6e7f",
        "name": "lagre og sende userid",
        "func": "// Hent ut UserId og TemporaryAuthToken fra API-responsen\nvar userId = msg.payload.UserId; // Hent UserId fra responsen\nvar tempAuthToken = msg.payload.TemporaryAuthToken; // Hent TemporaryAuthToken fra responsen\n\n// Lagre UserId og TemporaryAuthToken i flow-kontekst for videre bruk\nflow.set(\"userId\", userId);\nflow.set(\"tempAuthToken\", tempAuthToken);\n\n// Skriv ut for å debugge (valgfritt)\nnode.warn(\"UserId lagret: \" + userId);\nnode.warn(\"TemporaryAuthToken lagret: \" + tempAuthToken);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 300,
        "wires": [
            [
                "fad25a11a6b37096",
                "27f342e748a72984"
            ]
        ]
    },
    {
        "id": "34170c0153b4169e",
        "type": "mqtt in",
        "z": "4849650de0ff6e7f",
        "name": "",
        "topic": "sensor/data",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "ffaf32d3b2905d76",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 150,
        "y": 700,
        "wires": [
            [
                "c8e25e9919d01f55",
                "e78b86dbbbc99303"
            ]
        ]
    },
    {
        "id": "c8e25e9919d01f55",
        "type": "function",
        "z": "4849650de0ff6e7f",
        "name": "function 8",
        "func": "// Hent TemporaryAuthToken fra flow-konteksten for autentisering\nvar tempAuthToken = flow.get(\"tempAuthToken\");\nif (!tempAuthToken) {\n    node.error(\"No valid TemporaryAuthToken available\");\n    return null; // Avslutt flyten hvis token mangler\n}\n\n// Bruk den innkommende payloaden fra sensoren som er allerede formatert\nmsg.payload = {\n    \"temperature\": msg.payload.temperature,\n    \"humidity\": msg.payload.humidity,\n    \"gas_resistance\": msg.payload.gas_resistance,\n    \"pressure\": msg.payload.pressure\n};\n\n// Legg til Authorization-headeren for API-forespørselen\nmsg.headers = {\n    \"Content-Type\": \"application/json\",\n    \"Authorization\": \"Bearer \" + tempAuthToken\n};\n\n// Returner meldingen slik at den kan sendes videre til HTTP request-noden\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 700,
        "wires": [
            [
                "54cf4765475d1f41",
                "12ce3c46ffc856e3"
            ]
        ]
    },
    {
        "id": "54cf4765475d1f41",
        "type": "debug",
        "z": "4849650de0ff6e7f",
        "name": "debug 17",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 480,
        "y": 780,
        "wires": []
    },
    {
        "id": "e78b86dbbbc99303",
        "type": "debug",
        "z": "4849650de0ff6e7f",
        "name": "debug 18",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 260,
        "y": 780,
        "wires": []
    },
    {
        "id": "12ce3c46ffc856e3",
        "type": "http request",
        "z": "4849650de0ff6e7f",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 550,
        "y": 700,
        "wires": [
            [
                "f9b5881ce5909d2f"
            ]
        ]
    },
    {
        "id": "f9b5881ce5909d2f",
        "type": "switch",
        "z": "4849650de0ff6e7f",
        "name": "API Response check",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "200",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "400",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "401",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "500",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 800,
        "y": 700,
        "wires": [
            [
                "03bc6e8d284a184e"
            ],
            [
                "139f47e81b46c383"
            ],
            [
                "139f47e81b46c383"
            ],
            [
                "139f47e81b46c383"
            ]
        ]
    },
    {
        "id": "34304b66f99ee28d",
        "type": "inject",
        "z": "4849650de0ff6e7f",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"temperature\":25.5,\"humidity\":45.2,\"gas_resistance\":1000,\"pressure\":1012.3}",
        "payloadType": "json",
        "x": 630,
        "y": 60,
        "wires": [
            [
                "05cf5b1fd81169f2"
            ]
        ]
    },
    {
        "id": "05cf5b1fd81169f2",
        "type": "mqtt out",
        "z": "4849650de0ff6e7f",
        "name": "",
        "topic": "sensor/data",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "ffaf32d3b2905d76",
        "x": 830,
        "y": 60,
        "wires": []
    },
    {
        "id": "7f6cfd88b87baf76",
        "type": "comment",
        "z": "4849650de0ff6e7f",
        "name": "<- for testing ",
        "info": "",
        "x": 1070,
        "y": 60,
        "wires": []
    },
    {
        "id": "139f47e81b46c383",
        "type": "function",
        "z": "4849650de0ff6e7f",
        "name": "Lagre filer lokalt",
        "func": " // Lag en JSON-struktur for sensordataene med tidsstempel\nvar sensorData = {\n    \"timestamp\": new Date().toISOString(),\n    \"temperature\": msg.payload.temperature,\n    \"humidity\": msg.payload.humidity,\n    \"gas_resistance\": msg.payload.gas_resistance,\n    \"pressure\": msg.payload.pressure\n};\n\n// Oppdater payload for å sende til file out-noden\nmsg.payload = JSON.stringify(sensorData) + \"\\n\"; // Legger til newline for enklere lesing.  og dette er hvordan jeg injecter data: {\"temperature\":25.5,\"humidity\":45.2,\"gas_resistance\":1000,\"pressure\":1012.3}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 760,
        "wires": [
            [
                "5d4d74233189ad08"
            ]
        ]
    },
    {
        "id": "6aa969398913660f",
        "type": "debug",
        "z": "4849650de0ff6e7f",
        "name": "debug 19",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1320,
        "y": 760,
        "wires": []
    },
    {
        "id": "cf04f9252ca0db14",
        "type": "inject",
        "z": "4849650de0ff6e7f",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"temperature\":25.5,\"humidity\":45.2,\"gas_resistance\":1000,\"pressure\":1012.3}",
        "payloadType": "json",
        "x": 830,
        "y": 820,
        "wires": [
            [
                "139f47e81b46c383"
            ]
        ]
    },
    {
        "id": "5d4d74233189ad08",
        "type": "file",
        "z": "4849650de0ff6e7f",
        "name": "",
        "filename": "E:\\Code\\Node-Red Phoenix\\sensordata.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "utf8",
        "x": 1370,
        "y": 840,
        "wires": [
            []
        ]
    },
    {
        "id": "03bc6e8d284a184e",
        "type": "file in",
        "z": "4849650de0ff6e7f",
        "name": "",
        "filename": "E:\\Code\\Node-Red Phoenix\\sensordata.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1150,
        "y": 660,
        "wires": [
            [
                "6aa969398913660f",
                "27fcd457b945b770"
            ]
        ]
    },
    {
        "id": "27fcd457b945b770",
        "type": "function",
        "z": "4849650de0ff6e7f",
        "name": "function 9",
        "func": "// Splitt filinnholdet basert på nye linjer\nvar lines = msg.payload.split(\"\\n\");\n\n// Hent auth token fra flow-kontekst\nvar tempAuthToken = flow.get(\"tempAuthToken\");\ntempAuthToken = \"lol\";\n\nif (!tempAuthToken) {\n    node.error(\"No valid TemporaryAuthToken available\");\n    return null; // Avslutt flyten hvis token mangler\n}\n\n// Samle alle sensordata i en liste\nvar data = [];\n\nlines.forEach(function(line) {\n    if (line.trim() !== \"\") {  // Sjekk om linjen ikke er tom\n        try {\n            var sensorData = JSON.parse(line); // Parse linjen som JSON\n            data.push(sensorData); // Legg til sensordata i listen\n        } catch (e) {\n            node.error(\"Error parsing JSON: \" + e);\n        }\n    }\n});\n\n// Send hele listen med sensordata som én melding til API-et\nif (data.length > 0) {\n    var newMsg = RED.util.cloneMessage(msg);\n    newMsg.payload = data;\n\n    // Legg til Authorization-header for API-forespørselen\n    newMsg.headers = {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": \"Bearer \" + tempAuthToken\n    };\n\n    // Send hele datapakken videre som en melding\n    return newMsg;\n} else {\n    node.warn(\"No valid data found to send.\");\n    return null; // Avslutt flyten hvis ingen gyldige data er funnet\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1420,
        "y": 660,
        "wires": [
            [
                "06b60b84b7c4d2ab",
                "dbb42e7f70d02179"
            ]
        ]
    },
    {
        "id": "06b60b84b7c4d2ab",
        "type": "http request",
        "z": "4849650de0ff6e7f",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1630,
        "y": 660,
        "wires": [
            [
                "b016178098a017f4"
            ]
        ]
    },
    {
        "id": "b016178098a017f4",
        "type": "switch",
        "z": "4849650de0ff6e7f",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "200",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1790,
        "y": 660,
        "wires": [
            [
                "8b4063348dec1959"
            ],
            []
        ]
    },
    {
        "id": "aca6fd0ff2ad842e",
        "type": "comment",
        "z": "4849650de0ff6e7f",
        "name": "Sende data med auth",
        "info": "",
        "x": 340,
        "y": 640,
        "wires": []
    },
    {
        "id": "3e5e05238046dc18",
        "type": "comment",
        "z": "4849650de0ff6e7f",
        "name": "Sjekker responds",
        "info": "",
        "x": 780,
        "y": 620,
        "wires": []
    },
    {
        "id": "787c1338264640a6",
        "type": "comment",
        "z": "4849650de0ff6e7f",
        "name": "Ved feil lagrer data lokalt",
        "info": "",
        "x": 1050,
        "y": 840,
        "wires": []
    },
    {
        "id": "cfb87bcb8ed21a59",
        "type": "comment",
        "z": "4849650de0ff6e7f",
        "name": "Ved konnect er data sendt og vi sjekker om vi har data lagret lokalt. sender dette med function9",
        "info": "",
        "x": 1180,
        "y": 560,
        "wires": []
    },
    {
        "id": "a549f1dcfd3a3043",
        "type": "comment",
        "z": "4849650de0ff6e7f",
        "name": "Sjekker responds igjen og hvis den er sendt sletter vi filen lokalt",
        "info": "",
        "x": 1890,
        "y": 720,
        "wires": []
    },
    {
        "id": "f451c7f278c3728c",
        "type": "comment",
        "z": "4849650de0ff6e7f",
        "name": "skal få svar med temp auth token + userID",
        "info": "",
        "x": 1120,
        "y": 240,
        "wires": []
    },
    {
        "id": "27f342e748a72984",
        "type": "function",
        "z": "4849650de0ff6e7f",
        "name": "function 11",
        "func": "msg.payload = \"API connected og authenticated\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1490,
        "y": 260,
        "wires": [
            [
                "563ebc1566277ddd"
            ]
        ]
    },
    {
        "id": "6b63a1427eb67923",
        "type": "comment",
        "z": "4849650de0ff6e7f",
        "name": "sjekker svar og sender til app",
        "info": "",
        "x": 1560,
        "y": 140,
        "wires": []
    },
    {
        "id": "e0fdb2caa7f4c2fe",
        "type": "mqtt in",
        "z": "4849650de0ff6e7f",
        "name": "",
        "topic": "app/HistoryRequest",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "ffaf32d3b2905d76",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 130,
        "y": 1140,
        "wires": [
            [
                "6a05c980b75849cc"
            ]
        ]
    },
    {
        "id": "6a05c980b75849cc",
        "type": "function",
        "z": "4849650de0ff6e7f",
        "name": "function 12",
        "func": "// Hent TemporaryAuthToken fra flow-konteksten\nvar tempAuthToken = flow.get(\"tempAuthToken\");\n\nif (!tempAuthToken) {\n    node.error(\"No valid TemporaryAuthToken available\");\n    return null; // Avslutt flyten hvis token mangler\n}\n\n// Sett opp payload og headers for API-forespørselen\nmsg.headers = {\n    \"Content-Type\": \"application/json\",\n    \"Authorization\": \"Bearer \" + tempAuthToken\n};\n\n// Bruker msg.payload til å definere spørringen (valgfritt)\nmsg.payload = {\n    \"query\": \"simple_query_for_data\" // Kan tilpasses med f.eks. tidsramme eller sensor-id\n};\n\n// Angi API URL for å hente historikk\nmsg.url = \"http://api.yourserver.com/sensor/history\"; // Bytt til riktig API-endepunkt\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1140,
        "wires": [
            [
                "aeea556ecd0a49b4"
            ]
        ]
    },
    {
        "id": "143f197919d42037",
        "type": "switch",
        "z": "4849650de0ff6e7f",
        "name": "API Response check",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "200",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "400",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "401",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "500",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 780,
        "y": 1140,
        "wires": [
            [
                "4fa12816884755d1"
            ],
            [
                "010a33034941d4c8"
            ],
            [
                "010a33034941d4c8"
            ],
            [
                "010a33034941d4c8"
            ]
        ]
    },
    {
        "id": "aeea556ecd0a49b4",
        "type": "http request",
        "z": "4849650de0ff6e7f",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": false,
        "url": "",
        "persist": false,
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 550,
        "y": 1140,
        "wires": [
            [
                "143f197919d42037"
            ]
        ]
    },
    {
        "id": "4fa12816884755d1",
        "type": "function",
        "z": "4849650de0ff6e7f",
        "name": "function 13",
        "func": "// Dataene som returneres fra API-et lagres i msg.payload\nvar responseData = msg.payload; // Forvent at API-et returnerer JSON med historiske data\n\n// Sett opp respons for å sende til appen\nmsg.topic = \"app/HistoryResponse\"; // MQTT-emnet som appen lytter på for historikkdata\nmsg.payload = responseData;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 1120,
        "wires": [
            [
                "43e5d16b4b203cc2"
            ]
        ]
    },
    {
        "id": "43e5d16b4b203cc2",
        "type": "mqtt out",
        "z": "4849650de0ff6e7f",
        "name": "",
        "topic": "app/HistoryResponse",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "ffaf32d3b2905d76",
        "x": 1260,
        "y": 1120,
        "wires": []
    },
    {
        "id": "010a33034941d4c8",
        "type": "function",
        "z": "4849650de0ff6e7f",
        "name": "function 14",
        "func": "msg.payload = \"API Failed to respond\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 1180,
        "wires": [
            [
                "caa69c72d1a357ec"
            ]
        ]
    },
    {
        "id": "caa69c72d1a357ec",
        "type": "mqtt out",
        "z": "4849650de0ff6e7f",
        "name": "",
        "topic": "app/HistoryResponse",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "ffaf32d3b2905d76",
        "x": 1260,
        "y": 1180,
        "wires": []
    },
    {
        "id": "dbb42e7f70d02179",
        "type": "debug",
        "z": "4849650de0ff6e7f",
        "name": "debug 20",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1560,
        "y": 740,
        "wires": []
    },
    {
        "id": "c5b990fa2ee0d70c",
        "type": "inject",
        "z": "4849650de0ff6e7f",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 970,
        "y": 600,
        "wires": [
            [
                "03bc6e8d284a184e"
            ]
        ]
    },
    {
        "id": "8b4063348dec1959",
        "type": "exec",
        "z": "4849650de0ff6e7f",
        "command": "del E:\\Code\\Node-Red Phoenix\\sensordata.json",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 2100,
        "y": 640,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "fd24e4f039a52189",
        "type": "comment",
        "z": "4849650de0ff6e7f",
        "name": "Sletter filen for lagring av data. Må samsvare med de andre lagringene",
        "info": "",
        "x": 1910,
        "y": 560,
        "wires": []
    },
    {
        "id": "9320198b83e78ebc",
        "type": "comment",
        "z": "4849650de0ff6e7f",
        "name": "Spørring til Database:",
        "info": "",
        "x": 340,
        "y": 1080,
        "wires": []
    },
    {
        "id": "551e460f9ef43dad",
        "type": "comment",
        "z": "4849650de0ff6e7f",
        "name": "Svar som må bli omgjort til noe appen kan bruke",
        "info": "",
        "x": 1060,
        "y": 1060,
        "wires": []
    },
    {
        "id": "6d07d8fed49d4df0",
        "type": "http request",
        "z": "48444936cd495fbf",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "query",
        "url": "https://localhost:7142/api/Authentication/hub-credentials",
        "tls": "29cf605083afc9f5",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": true,
        "headers": [],
        "x": 430,
        "y": 260,
        "wires": [
            [
                "28210a1edacaa116",
                "798280e06d309126"
            ]
        ]
    },
    {
        "id": "1b8be4850dde298c",
        "type": "inject",
        "z": "48444936cd495fbf",
        "name": "Inject hubId",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"hubId\": \"3857cb35-c52e-45a7-a81f-5a07b5a0b310\"}",
        "payloadType": "json",
        "x": 230,
        "y": 260,
        "wires": [
            [
                "6d07d8fed49d4df0"
            ]
        ]
    },
    {
        "id": "28210a1edacaa116",
        "type": "debug",
        "z": "48444936cd495fbf",
        "name": "debug 21",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 620,
        "y": 380,
        "wires": []
    },
    {
        "id": "47b5be8c20564a5c",
        "type": "comment",
        "z": "48444936cd495fbf",
        "name": "Setup!",
        "info": "On setup!\ngets clientid and secret, needs to be stored!",
        "x": 310,
        "y": 200,
        "wires": []
    },
    {
        "id": "7fd8c1cb10b812c5",
        "type": "catch",
        "z": "48444936cd495fbf",
        "name": "",
        "scope": [
            "6d07d8fed49d4df0"
        ],
        "uncaught": false,
        "x": 1390,
        "y": 1060,
        "wires": [
            []
        ]
    },
    {
        "id": "798280e06d309126",
        "type": "function",
        "z": "48444936cd495fbf",
        "name": "Store ClientId & Secret",
        "func": "var clientId = msg.payload.clientId;\nvar clientSecret = msg.payload.clientSecret;\n\nglobal.set(\"ClientId\", clientId);\nglobal.set(\"ClientSecret\", clientSecret);\n\n\nvar message = clientId + \" \" + clientSecret;\n\nmsg.payload = message;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 260,
        "wires": [
            [
                "80aa8dfb6493cd8b"
            ]
        ]
    },
    {
        "id": "0f6b0f517de8724a",
        "type": "inject",
        "z": "48444936cd495fbf",
        "name": "Inject clientId & Secret",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"clientId\":\"6960c77b-1866-4623-b9c4-1eaa30202f98\",\"clientSecret\":\"92dd2623-b7d5-418b-be53-ff0217aaf69f\"}",
        "payloadType": "json",
        "x": 140,
        "y": 580,
        "wires": [
            [
                "c7a6fd0c1cd92728"
            ]
        ]
    },
    {
        "id": "a7312cf8d4abbac3",
        "type": "comment",
        "z": "48444936cd495fbf",
        "name": "Auth Login!",
        "info": "",
        "x": 310,
        "y": 520,
        "wires": []
    },
    {
        "id": "c7a6fd0c1cd92728",
        "type": "http request",
        "z": "48444936cd495fbf",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://localhost:7142/api/Authentication/login?isHub=true",
        "tls": "29cf605083afc9f5",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": true,
        "headers": [],
        "x": 490,
        "y": 580,
        "wires": [
            [
                "d8991dd675026b1c",
                "b27abdad800ed9ca"
            ]
        ]
    },
    {
        "id": "d8991dd675026b1c",
        "type": "debug",
        "z": "48444936cd495fbf",
        "name": "debug 22",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 700,
        "y": 680,
        "wires": []
    },
    {
        "id": "b27abdad800ed9ca",
        "type": "function",
        "z": "48444936cd495fbf",
        "name": "Collect accessToken And store",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 580,
        "wires": [
            [
                "62e5f5be44713c4f"
            ]
        ]
    },
    {
        "id": "a52badb8df5b99e3",
        "type": "function",
        "z": "48444936cd495fbf",
        "name": "Get ClientId and Secret from file",
        "func": "var client = {\n    \"clientId\": global.get(\"ClientId\"),\n    \"clientSecret\": global.get(\"ClientSecret\")\n};\n\n\n\nmsg.payload = client;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 740,
        "wires": [
            [
                "c7a6fd0c1cd92728",
                "201a1bcd3fd576e7"
            ]
        ]
    },
    {
        "id": "e7a3d87b526bc20b",
        "type": "inject",
        "z": "48444936cd495fbf",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1170,
        "y": 160,
        "wires": [
            [
                "4a053535b740837d"
            ]
        ]
    },
    {
        "id": "57dadce0d5a6d578",
        "type": "debug",
        "z": "48444936cd495fbf",
        "name": "debug 23",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1620,
        "y": 220,
        "wires": []
    },
    {
        "id": "33e867561d19aa55",
        "type": "link in",
        "z": "48444936cd495fbf",
        "name": "Auth Login",
        "links": [],
        "x": 65,
        "y": 740,
        "wires": [
            [
                "a52badb8df5b99e3"
            ]
        ]
    },
    {
        "id": "4a053535b740837d",
        "type": "link call",
        "z": "48444936cd495fbf",
        "name": "Test",
        "links": [
            "33e867561d19aa55"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 1370,
        "y": 180,
        "wires": [
            [
                "57dadce0d5a6d578"
            ]
        ]
    },
    {
        "id": "62e5f5be44713c4f",
        "type": "link out",
        "z": "48444936cd495fbf",
        "name": "auth Login",
        "mode": "return",
        "links": [],
        "x": 1085,
        "y": 580,
        "wires": []
    },
    {
        "id": "201a1bcd3fd576e7",
        "type": "debug",
        "z": "48444936cd495fbf",
        "name": "debug 24",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 700,
        "y": 800,
        "wires": []
    },
    {
        "id": "80aa8dfb6493cd8b",
        "type": "debug",
        "z": "48444936cd495fbf",
        "name": "debug 25",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 960,
        "y": 340,
        "wires": []
    },
    {
        "id": "f60ab83a0981254e",
        "type": "comment",
        "z": "48444936cd495fbf",
        "name": "Example usage to login",
        "info": "",
        "x": 1380,
        "y": 100,
        "wires": []
    }
]