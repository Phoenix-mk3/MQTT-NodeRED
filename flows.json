[
    {
        "id": "7c1fe608abafdee9",
        "type": "tab",
        "label": "MQTT Levering og mottak",
        "disabled": false,
        "info": "her skal sensordataen komme inn",
        "env": []
    },
    {
        "id": "0fa81af8f1d68229",
        "type": "tab",
        "label": "API Requests og auth",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "e421cbd625b1e3bc",
        "type": "tab",
        "label": "Hub Auth",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "ffaf32d3b2905d76",
        "type": "mqtt-broker",
        "name": "",
        "broker": "192.168.10.229",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "01acbed2d3ecc2db",
        "type": "tls-config",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "broker.crt",
        "keyname": "broker.key",
        "caname": "ca.crt",
        "servername": "",
        "verifyservercert": false,
        "alpnprotocol": ""
    },
    {
        "id": "58ffeb75cb860e3d",
        "type": "mqtt-broker",
        "name": "",
        "broker": "192.168.10.229",
        "port": "8883",
        "tls": "88c2522ba4061f5b",
        "clientid": "",
        "autoConnect": true,
        "usetls": true,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "126bcb5c88f1a2cb",
        "type": "tls-config",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "",
        "servername": "",
        "verifyservercert": true,
        "alpnprotocol": ""
    },
    {
        "id": "d1fb5a1c9120777e",
        "type": "mqtt-broker",
        "name": "",
        "broker": "",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "88c2522ba4061f5b",
        "type": "tls-config",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "broker.crt",
        "keyname": "broker.key",
        "caname": "ca.crt",
        "servername": "",
        "verifyservercert": true,
        "alpnprotocol": ""
    },
    {
        "id": "7f35093cb514a4b6",
        "type": "global-config",
        "name": "global-config",
        "env": []
    },
    {
        "id": "3f2e596f37af125b",
        "type": "tls-config",
        "name": "Insecure TLS",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "",
        "servername": "",
        "verifyservercert": false,
        "alpnprotocol": ""
    },
    {
        "id": "3eca19b059d726ef",
        "type": "tls-config",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "broker.crt",
        "keyname": "broker.key",
        "caname": "ca.crt",
        "servername": "",
        "verifyservercert": false,
        "alpnprotocol": ""
    },
    {
        "id": "320b2ebfd851f445",
        "type": "mqtt-broker",
        "name": "",
        "broker": "192.168.10.229",
        "port": "8883",
        "tls": "50550e8fe1b3417c",
        "clientid": "",
        "autoConnect": true,
        "usetls": true,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "bc9e7c8d5247e4d8",
        "type": "tls-config",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "",
        "servername": "",
        "verifyservercert": true,
        "alpnprotocol": ""
    },
    {
        "id": "0ab6c42cf5e0f5b1",
        "type": "mqtt-broker",
        "name": "",
        "broker": "",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "50550e8fe1b3417c",
        "type": "tls-config",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "broker.crt",
        "keyname": "broker.key",
        "caname": "ca.crt",
        "servername": "",
        "verifyservercert": true,
        "alpnprotocol": ""
    },
    {
        "id": "7b17fa89499a2743",
        "type": "tls-config",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "broker.crt",
        "keyname": "broker.key",
        "caname": "ca.crt",
        "servername": "",
        "verifyservercert": false,
        "alpnprotocol": ""
    },
    {
        "id": "775352b8fdecf86c",
        "type": "mqtt-broker",
        "name": "",
        "broker": "192.168.10.229",
        "port": "8883",
        "tls": "bb035a77b49cf28c",
        "clientid": "",
        "autoConnect": true,
        "usetls": true,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "361272cb3d695d6a",
        "type": "tls-config",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "",
        "servername": "",
        "verifyservercert": true,
        "alpnprotocol": ""
    },
    {
        "id": "a1a84e89b69a0540",
        "type": "mqtt-broker",
        "name": "",
        "broker": "",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "bb035a77b49cf28c",
        "type": "tls-config",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "broker.crt",
        "keyname": "broker.key",
        "caname": "ca.crt",
        "servername": "",
        "verifyservercert": true,
        "alpnprotocol": ""
    },
    {
        "id": "3d52208e47fbe976",
        "type": "tls-config",
        "name": "test1",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "",
        "servername": "",
        "verifyservercert": false,
        "alpnprotocol": ""
    },
    {
        "id": "cd37e6f4df702aa1",
        "type": "inject",
        "z": "7c1fe608abafdee9",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"temperature\":25.5,\"humidity\":45.2,\"gas_resistance\":1000,\"pressure\":1012.3}",
        "payloadType": "json",
        "x": 130,
        "y": 60,
        "wires": [
            [
                "8e3069b7ff9ab918"
            ]
        ]
    },
    {
        "id": "8e3069b7ff9ab918",
        "type": "mqtt out",
        "z": "7c1fe608abafdee9",
        "name": "",
        "topic": "sensor/data",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "ffaf32d3b2905d76",
        "x": 330,
        "y": 60,
        "wires": []
    },
    {
        "id": "d8a5f3fc9e31ddcb",
        "type": "comment",
        "z": "7c1fe608abafdee9",
        "name": "<- for testing ",
        "info": "",
        "x": 570,
        "y": 60,
        "wires": []
    },
    {
        "id": "17c25f1a614b3b50",
        "type": "mqtt in",
        "z": "7c1fe608abafdee9",
        "name": "",
        "topic": "app/alarmtime",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "ffaf32d3b2905d76",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 110,
        "y": 320,
        "wires": [
            [
                "3192ea3da0091a97",
                "ee128c7f59155504"
            ]
        ]
    },
    {
        "id": "3192ea3da0091a97",
        "type": "debug",
        "z": "7c1fe608abafdee9",
        "name": "debug 8",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 380,
        "y": 240,
        "wires": []
    },
    {
        "id": "ee128c7f59155504",
        "type": "function",
        "z": "7c1fe608abafdee9",
        "name": "Function 1",
        "func": "// Hent meldingen (f.eks. \"16:20\")\nvar alarmTime = msg.payload;\n\n// Splitter \"hh:mm\" til timer og minutter\nvar parts = alarmTime.split(\":\");\nvar hours = parseInt(parts[0]);\nvar minutes = parseInt(parts[1]);\n\n// Konverter til millisekunder fra midnatt\nvar alarmMillis = (hours * 3600000) + (minutes * 60000);\n\n// Oppdater meldingen med den nye verdien i millisekunder\nmsg.payload = alarmMillis;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 320,
        "wires": [
            [
                "834e4f97d29566de",
                "528e8cb550b80102"
            ]
        ]
    },
    {
        "id": "834e4f97d29566de",
        "type": "mqtt out",
        "z": "7c1fe608abafdee9",
        "name": "",
        "topic": "esp32/alarmtime",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "ffaf32d3b2905d76",
        "x": 670,
        "y": 320,
        "wires": []
    },
    {
        "id": "528e8cb550b80102",
        "type": "debug",
        "z": "7c1fe608abafdee9",
        "name": "debug 9",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 620,
        "y": 240,
        "wires": []
    },
    {
        "id": "992ab7dd1968942b",
        "type": "comment",
        "z": "7c1fe608abafdee9",
        "name": "<- fra app til esp32 alarmtid.",
        "info": "",
        "x": 920,
        "y": 320,
        "wires": []
    },
    {
        "id": "800c4411e5e8b951",
        "type": "mqtt in",
        "z": "7c1fe608abafdee9",
        "name": "",
        "topic": "app/alarmoff",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "ffaf32d3b2905d76",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 90,
        "y": 520,
        "wires": [
            [
                "11d4c49917e63a22",
                "38bd5c836d2d6865"
            ]
        ]
    },
    {
        "id": "11d4c49917e63a22",
        "type": "mqtt out",
        "z": "7c1fe608abafdee9",
        "name": "",
        "topic": "esp32/alarmoff",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "ffaf32d3b2905d76",
        "x": 360,
        "y": 520,
        "wires": []
    },
    {
        "id": "6590638af10da403",
        "type": "comment",
        "z": "7c1fe608abafdee9",
        "name": "Sku av alarm",
        "info": "",
        "x": 590,
        "y": 520,
        "wires": []
    },
    {
        "id": "38bd5c836d2d6865",
        "type": "debug",
        "z": "7c1fe608abafdee9",
        "name": "debug 12",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 340,
        "y": 420,
        "wires": []
    },
    {
        "id": "6c01f15fb8067729",
        "type": "inject",
        "z": "7c1fe608abafdee9",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{   \"temperature\": 22.5,   \"humidity\": 55 }",
        "payloadType": "json",
        "x": 110,
        "y": 620,
        "wires": [
            [
                "13db172b952d41b4"
            ]
        ]
    },
    {
        "id": "13db172b952d41b4",
        "type": "mqtt out",
        "z": "7c1fe608abafdee9",
        "name": "",
        "topic": "test/sensor",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "775352b8fdecf86c",
        "x": 330,
        "y": 620,
        "wires": []
    },
    {
        "id": "a9c4755868354a54",
        "type": "mqtt in",
        "z": "7c1fe608abafdee9",
        "name": "",
        "topic": "test/sensor",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "775352b8fdecf86c",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 140,
        "y": 720,
        "wires": [
            [
                "d84c04eb6fd1d5be"
            ]
        ]
    },
    {
        "id": "d84c04eb6fd1d5be",
        "type": "debug",
        "z": "7c1fe608abafdee9",
        "name": "debug 13",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 300,
        "y": 720,
        "wires": []
    },
    {
        "id": "79dd9164157e2800",
        "type": "function",
        "z": "0fa81af8f1d68229",
        "name": "function 4",
        "func": "var requestData = {\n    \"UserId\": msg.payload.UserId\n};\nmsg.payload = requestData;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 300,
        "wires": [
            [
                "ab4370ab38624338"
            ]
        ]
    },
    {
        "id": "ab4370ab38624338",
        "type": "http request",
        "z": "0fa81af8f1d68229",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "body",
        "url": "https://localhost:7142/api/Authentication/hub-user-auth",
        "tls": "3d52208e47fbe976",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 550,
        "y": 300,
        "wires": [
            [
                "bb4c5944d690403a"
            ]
        ]
    },
    {
        "id": "bb4c5944d690403a",
        "type": "switch",
        "z": "0fa81af8f1d68229",
        "name": "API Response check",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "200",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "400",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "401",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "500",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 840,
        "y": 300,
        "wires": [
            [
                "ab4d67be80f44059"
            ],
            [
                "a7fd9fbc46043de7"
            ],
            [
                "a7fd9fbc46043de7"
            ],
            [
                "a7fd9fbc46043de7"
            ]
        ]
    },
    {
        "id": "cc322a4e977cfd54",
        "type": "comment",
        "z": "0fa81af8f1d68229",
        "name": "Først sende forespørsel fra app.",
        "info": "",
        "x": 150,
        "y": 200,
        "wires": []
    },
    {
        "id": "842566436d7c6e5b",
        "type": "mqtt in",
        "z": "0fa81af8f1d68229",
        "name": "",
        "topic": "App/auth",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "ffaf32d3b2905d76",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 160,
        "y": 300,
        "wires": [
            [
                "79dd9164157e2800",
                "7159b429c9803e3f"
            ]
        ]
    },
    {
        "id": "2893d292171679a2",
        "type": "comment",
        "z": "0fa81af8f1d68229",
        "name": "setter payload tom og sender videre til api",
        "info": "",
        "x": 320,
        "y": 240,
        "wires": []
    },
    {
        "id": "3905dbfc964d338f",
        "type": "comment",
        "z": "0fa81af8f1d68229",
        "name": "Sende Auth forespørsel til APIet. i formen Post for å sende data for authentisering",
        "info": "",
        "x": 580,
        "y": 160,
        "wires": []
    },
    {
        "id": "0483a366a78e9457",
        "type": "mqtt out",
        "z": "0fa81af8f1d68229",
        "name": "",
        "topic": "app/authresponds",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "ffaf32d3b2905d76",
        "x": 1450,
        "y": 360,
        "wires": []
    },
    {
        "id": "55d1cdfc97226412",
        "type": "comment",
        "z": "0fa81af8f1d68229",
        "name": "Switch for å catche om den feiler eller ikke:",
        "info": "",
        "x": 880,
        "y": 200,
        "wires": []
    },
    {
        "id": "c88010c78d3a90ac",
        "type": "comment",
        "z": "0fa81af8f1d68229",
        "name": "ved feil sende responds.",
        "info": "",
        "x": 1130,
        "y": 460,
        "wires": []
    },
    {
        "id": "bd4a9eeba1014583",
        "type": "mqtt out",
        "z": "0fa81af8f1d68229",
        "name": "",
        "topic": "app/authresponds",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "ffaf32d3b2905d76",
        "x": 1670,
        "y": 280,
        "wires": []
    },
    {
        "id": "ed40d82030134397",
        "type": "inject",
        "z": "0fa81af8f1d68229",
        "name": "Connect success!",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "statusCode",
                "v": "200",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{    \"UserId\": \"123e4567-e89b-12d3-a456-426614174000\",    \"TemporaryAuthToken\": \"your_auth_token_here\" }",
        "payloadType": "json",
        "x": 610,
        "y": 240,
        "wires": [
            [
                "bb4c5944d690403a"
            ]
        ]
    },
    {
        "id": "8c6535f6c3ddb528",
        "type": "inject",
        "z": "0fa81af8f1d68229",
        "name": "Connection failed",
        "props": [
            {
                "p": "statusCode",
                "v": "400",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 620,
        "y": 420,
        "wires": [
            [
                "bb4c5944d690403a"
            ]
        ]
    },
    {
        "id": "a7fd9fbc46043de7",
        "type": "function",
        "z": "0fa81af8f1d68229",
        "name": "function 5",
        "func": "msg.payload = \"API failed to connect\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 320,
        "wires": [
            [
                "0483a366a78e9457"
            ]
        ]
    },
    {
        "id": "ab4d67be80f44059",
        "type": "function",
        "z": "0fa81af8f1d68229",
        "name": "lagre og sende userid",
        "func": "// Hent ut UserId og TemporaryAuthToken fra API-responsen\nvar userId = msg.payload.UserId; // Hent UserId fra responsen\nvar tempAuthToken = msg.payload.TemporaryAuthToken; // Hent TemporaryAuthToken fra responsen\n\n// Lagre UserId og TemporaryAuthToken i flow-kontekst for videre bruk\nflow.set(\"userId\", userId);\nflow.set(\"tempAuthToken\", tempAuthToken);\n\n// Skriv ut for å debugge (valgfritt)\nnode.warn(\"UserId lagret: \" + userId);\nnode.warn(\"TemporaryAuthToken lagret: \" + tempAuthToken);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1180,
        "y": 280,
        "wires": [
            [
                "0483a366a78e9457",
                "0781beb677a3d325",
                "bd4a9eeba1014583"
            ]
        ]
    },
    {
        "id": "589b6658b3ac95fb",
        "type": "mqtt in",
        "z": "0fa81af8f1d68229",
        "name": "",
        "topic": "sensor/data",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "ffaf32d3b2905d76",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 150,
        "y": 700,
        "wires": [
            [
                "c8bcd0dd49a5e487"
            ]
        ]
    },
    {
        "id": "c8bcd0dd49a5e487",
        "type": "function",
        "z": "0fa81af8f1d68229",
        "name": "function 8",
        "func": "// Hent TemporaryAuthToken fra flow-konteksten for autentisering\nvar tempAuthToken = flow.get(\"tempAuthToken\");\nif (!tempAuthToken) {\n    node.error(\"No valid TemporaryAuthToken available\");\n    return null; // Avslutt flyten hvis token mangler\n}\n\n// Hent sensorverdier fra payload\nvar temperature = msg.payload.temperature;\nvar humidity = msg.payload.humidity;\nvar gasResistance = msg.payload.gas_resistance;\nvar pressure = msg.payload.pressure;\n\n// Hent DeviceId fra flow-kontekst (UUID til devicen)\nvar deviceId = flow.get(\"deviceId\") || \"123e4567-e89b-12d3-a456-426614174000\"; // Eksempel UUID, erstatt med riktig ID\n\n// Sett opp dataene som skal sendes til API-et\nvar dataArray = [];\n\n// Legg til hvert målepunkt som et eget objekt for API-et\nif (temperature !== undefined) {\n    dataArray.push({\n        \"DeviceId\": deviceId,\n        \"Value\": temperature,\n        \"Unit\": \"Celsius\",\n        \"DataType\": \"temperature\",\n        \"CreatedAt\": new Date().toISOString()\n    });\n}\n\nif (humidity !== undefined) {\n    dataArray.push({\n        \"DeviceId\": deviceId,\n        \"Value\": humidity,\n        \"Unit\": \"Percent\",\n        \"DataType\": \"humidity\",\n        \"CreatedAt\": new Date().toISOString()\n    });\n}\n\nif (gasResistance !== undefined) {\n    dataArray.push({\n        \"DeviceId\": deviceId,\n        \"Value\": gasResistance,\n        \"Unit\": \"Ohms\",\n        \"DataType\": \"gas_resistance\",\n        \"CreatedAt\": new Date().toISOString()\n    });\n}\n\nif (pressure !== undefined) {\n    dataArray.push({\n        \"DeviceId\": deviceId,\n        \"Value\": pressure,\n        \"Unit\": \"hPa\",\n        \"DataType\": \"pressure\",\n        \"CreatedAt\": new Date().toISOString()\n    });\n}\n\n// Oppdater payload med dataArray for å sende til API-et\nmsg.payload = dataArray;\n\n// Legg til Authorization-header for API-forespørselen\nmsg.headers = {\n    \"Content-Type\": \"application/json\",\n    \"Authorization\": \"Bearer \" + tempAuthToken\n};\n\n// Returner meldingen slik at den kan sendes videre til HTTP request-noden\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 700,
        "wires": [
            [
                "3ece131b5e58d3db"
            ]
        ]
    },
    {
        "id": "3ece131b5e58d3db",
        "type": "http request",
        "z": "0fa81af8f1d68229",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://localhost:7142/api/Authentication/hub-user-auth",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 550,
        "y": 700,
        "wires": [
            [
                "5162a556aceec59e"
            ]
        ]
    },
    {
        "id": "5162a556aceec59e",
        "type": "switch",
        "z": "0fa81af8f1d68229",
        "name": "API Response check",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "200",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "400",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "401",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "500",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 5,
        "x": 800,
        "y": 700,
        "wires": [
            [
                "f47f67c0be4cf3e4",
                "485e5d9a0382ced3"
            ],
            [
                "8cf62b8951755ade"
            ],
            [
                "8cf62b8951755ade"
            ],
            [
                "8cf62b8951755ade"
            ],
            [
                "8cf62b8951755ade"
            ]
        ]
    },
    {
        "id": "b91761d459518ba3",
        "type": "inject",
        "z": "0fa81af8f1d68229",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"temperature\":25.5,\"humidity\":45.2,\"gas_resistance\":1000,\"pressure\":1012.3}",
        "payloadType": "json",
        "x": 630,
        "y": 60,
        "wires": [
            [
                "e4f6f1374c0fd95f"
            ]
        ]
    },
    {
        "id": "e4f6f1374c0fd95f",
        "type": "mqtt out",
        "z": "0fa81af8f1d68229",
        "name": "",
        "topic": "sensor/data",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "ffaf32d3b2905d76",
        "x": 830,
        "y": 60,
        "wires": []
    },
    {
        "id": "7a1c494cf15dd2b3",
        "type": "comment",
        "z": "0fa81af8f1d68229",
        "name": "<- for testing ",
        "info": "",
        "x": 1070,
        "y": 60,
        "wires": []
    },
    {
        "id": "1c79198cf30207ad",
        "type": "inject",
        "z": "0fa81af8f1d68229",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"temperature\":25.5,\"humidity\":45.2,\"gas_resistance\":1000,\"pressure\":1012.3}",
        "payloadType": "json",
        "x": 1010,
        "y": 780,
        "wires": [
            [
                "8cf62b8951755ade"
            ]
        ]
    },
    {
        "id": "e5b5d2c4948637d8",
        "type": "file",
        "z": "0fa81af8f1d68229",
        "name": "",
        "filename": "E:\\Code\\Node-Red Phoenix\\sensordata.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "utf8",
        "x": 1430,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "f47f67c0be4cf3e4",
        "type": "file in",
        "z": "0fa81af8f1d68229",
        "name": "",
        "filename": "E:\\Code\\Node-Red Phoenix\\sensordata.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1150,
        "y": 660,
        "wires": [
            [
                "5885a25c2c7104fd"
            ]
        ]
    },
    {
        "id": "5885a25c2c7104fd",
        "type": "function",
        "z": "0fa81af8f1d68229",
        "name": "function 9",
        "func": "// Hent auth token fra flow-kontekst\nvar tempAuthToken = flow.get(\"tempAuthToken\");\n\nif (!tempAuthToken) {\n    node.error(\"No valid TemporaryAuthToken available\");\n    return null; // Avslutt flyten hvis token mangler\n}\n\n// Forsøk å parse hele filinnholdet som en JSON-array\nvar data = [];\ntry {\n    data = JSON.parse(msg.payload); // Anta at payload nå er en JSON-array\n    if (!Array.isArray(data)) {\n        node.error(\"Expected a JSON array, but got something else.\");\n        return null; // Avslutt flyten hvis innholdet ikke er en array\n    }\n} catch (e) {\n    node.error(\"Error parsing JSON: \" + e);\n    return null; // Avslutt flyten hvis parsing mislykkes\n}\n\n// Send hele listen med sensordata som én melding til API-et\nif (data.length > 0) {\n    var newMsg = RED.util.cloneMessage(msg);\n    newMsg.payload = data;\n\n    // Legg til Authorization-header for API-forespørselen\n    newMsg.headers = {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": \"Bearer \" + tempAuthToken\n    };\n\n    // Send hele datapakken videre som en melding\n    return newMsg;\n} else {\n    node.warn(\"No valid data found to send.\");\n    return null; // Avslutt flyten hvis ingen gyldige data er funnet\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1400,
        "y": 660,
        "wires": [
            [
                "ce5d412abe8083c6"
            ]
        ]
    },
    {
        "id": "ce5d412abe8083c6",
        "type": "http request",
        "z": "0fa81af8f1d68229",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1570,
        "y": 660,
        "wires": [
            [
                "b6d0c716810ab161"
            ]
        ]
    },
    {
        "id": "b6d0c716810ab161",
        "type": "switch",
        "z": "0fa81af8f1d68229",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "200",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1730,
        "y": 660,
        "wires": [
            [
                "3db70a2398934698"
            ]
        ]
    },
    {
        "id": "d9e1b2c2d299ed25",
        "type": "comment",
        "z": "0fa81af8f1d68229",
        "name": "Sende data med auth",
        "info": "",
        "x": 340,
        "y": 640,
        "wires": []
    },
    {
        "id": "4f80235bd0d89aa9",
        "type": "comment",
        "z": "0fa81af8f1d68229",
        "name": "Sjekker responds",
        "info": "",
        "x": 720,
        "y": 600,
        "wires": []
    },
    {
        "id": "916d068da4eba462",
        "type": "comment",
        "z": "0fa81af8f1d68229",
        "name": "Ved feil lagrer data lokalt",
        "info": "",
        "x": 1090,
        "y": 820,
        "wires": []
    },
    {
        "id": "ea263a0d95f14447",
        "type": "comment",
        "z": "0fa81af8f1d68229",
        "name": "Ved konnect er data sendt og vi sjekker om vi har data lagret lokalt. sender dette med function9",
        "info": "",
        "x": 1180,
        "y": 560,
        "wires": []
    },
    {
        "id": "aff7a4fe1a0a59dc",
        "type": "comment",
        "z": "0fa81af8f1d68229",
        "name": "Sjekker responds igjen og hvis den er sendt sletter vi filen lokalt",
        "info": "",
        "x": 1870,
        "y": 740,
        "wires": []
    },
    {
        "id": "2965fb70e658fa35",
        "type": "comment",
        "z": "0fa81af8f1d68229",
        "name": "skal få svar med temp auth token + userID",
        "info": "",
        "x": 1120,
        "y": 240,
        "wires": []
    },
    {
        "id": "0781beb677a3d325",
        "type": "function",
        "z": "0fa81af8f1d68229",
        "name": "function 11",
        "func": "msg.payload = \"API connected og authenticated\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1470,
        "y": 240,
        "wires": [
            [
                "bd4a9eeba1014583"
            ]
        ]
    },
    {
        "id": "1de153c3e9529653",
        "type": "comment",
        "z": "0fa81af8f1d68229",
        "name": "sjekker svar og sender til app",
        "info": "",
        "x": 1560,
        "y": 140,
        "wires": []
    },
    {
        "id": "5a3e1caab6d5895a",
        "type": "mqtt in",
        "z": "0fa81af8f1d68229",
        "name": "",
        "topic": "app/HistoryRequest",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "ffaf32d3b2905d76",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 130,
        "y": 1040,
        "wires": [
            [
                "be914fc760afa97a",
                "920c9fefd84d6048"
            ]
        ]
    },
    {
        "id": "be914fc760afa97a",
        "type": "function",
        "z": "0fa81af8f1d68229",
        "name": "function 12",
        "func": "// Hent TemporaryAuthToken fra flow-konteksten\nvar tempAuthToken = flow.get(\"tempAuthToken\");\n\nif (!tempAuthToken) {\n    node.error(\"No valid TemporaryAuthToken available\");\n    return null; // Avslutt flyten hvis token mangler\n}\n\n// Sett opp payload og headers for API-forespørselen\nmsg.headers = {\n    \"Content-Type\": \"application/json\",\n    \"Authorization\": \"Bearer \" + tempAuthToken\n};\n\n// Bruker msg.payload til å definere spørringen (valgfritt)\nmsg.payload = {\n    \"query\": \"simple_query_for_data\" // Kan tilpasses med f.eks. tidsramme eller sensor-id\n};\n\n// Angi API URL for å hente historikk\nmsg.url = \"http://api.yourserver.com/sensor/history\"; // Bytt til riktig API-endepunkt\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1040,
        "wires": [
            [
                "ae7f0ff47fc329d2"
            ]
        ]
    },
    {
        "id": "d166f36d897fe2e5",
        "type": "switch",
        "z": "0fa81af8f1d68229",
        "name": "API Response check",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "200",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "400",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "401",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "500",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 780,
        "y": 1040,
        "wires": [
            [
                "572d7d0f3c3fdbbe"
            ],
            [
                "abb946281b94774a"
            ],
            [
                "abb946281b94774a"
            ],
            [
                "abb946281b94774a"
            ]
        ]
    },
    {
        "id": "ae7f0ff47fc329d2",
        "type": "http request",
        "z": "0fa81af8f1d68229",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 550,
        "y": 1040,
        "wires": [
            [
                "d166f36d897fe2e5"
            ]
        ]
    },
    {
        "id": "572d7d0f3c3fdbbe",
        "type": "function",
        "z": "0fa81af8f1d68229",
        "name": "function 13",
        "func": "var response = msg.payload;\n\n// Hvis response er et enkelt objekt, pakk det inn i en liste for å kunne bruke map()\nif (!Array.isArray(response)) {\n    response = [response];\n}\n\nvar formattedData = response.map(function(record) {\n    return {\n        timestamp: record.CreatedAt,\n        deviceId: record.DeviceId,\n        dataType: record.DataType,\n        value: record.Value,\n        unit: record.Unit\n    };\n});\n\nmsg.payload = formattedData;  // Oppdater payload med den formaterte dataen\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 1020,
        "wires": [
            [
                "00308c6efbcf70b3",
                "345cca50451e7530"
            ]
        ]
    },
    {
        "id": "00308c6efbcf70b3",
        "type": "mqtt out",
        "z": "0fa81af8f1d68229",
        "name": "",
        "topic": "app/HistoryResponse",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "ffaf32d3b2905d76",
        "x": 1320,
        "y": 1000,
        "wires": []
    },
    {
        "id": "abb946281b94774a",
        "type": "function",
        "z": "0fa81af8f1d68229",
        "name": "function 14",
        "func": "msg.payload = \"API Failed to respond\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 1060,
        "wires": [
            [
                "5a78a1cd0c1ea66a"
            ]
        ]
    },
    {
        "id": "5a78a1cd0c1ea66a",
        "type": "mqtt out",
        "z": "0fa81af8f1d68229",
        "name": "",
        "topic": "app/HistoryResponse",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "ffaf32d3b2905d76",
        "x": 1280,
        "y": 1080,
        "wires": []
    },
    {
        "id": "66cb8dda5156efad",
        "type": "inject",
        "z": "0fa81af8f1d68229",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 850,
        "y": 640,
        "wires": [
            [
                "f47f67c0be4cf3e4"
            ]
        ]
    },
    {
        "id": "3db70a2398934698",
        "type": "exec",
        "z": "0fa81af8f1d68229",
        "command": "del E:\\Code\\Node-Red Phoenix\\sensordata.json",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 2000,
        "y": 660,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "35137adb3950605b",
        "type": "comment",
        "z": "0fa81af8f1d68229",
        "name": "Sletter filen for lagring av data. Må samsvare med de andre lagringene",
        "info": "",
        "x": 1910,
        "y": 560,
        "wires": []
    },
    {
        "id": "3359d605397d2768",
        "type": "comment",
        "z": "0fa81af8f1d68229",
        "name": "Spørring til Database:",
        "info": "",
        "x": 340,
        "y": 960,
        "wires": []
    },
    {
        "id": "122b2bb3f8e36c61",
        "type": "comment",
        "z": "0fa81af8f1d68229",
        "name": "Svar som må bli omgjort til noe appen kan bruke",
        "info": "",
        "x": 1020,
        "y": 920,
        "wires": []
    },
    {
        "id": "8cf62b8951755ade",
        "type": "function",
        "z": "0fa81af8f1d68229",
        "name": "function 15",
        "func": "// Her kan du sette UUID for DeviceId, dette bør være unikt for hvert sensor-device.\nvar deviceId = flow.get(\"deviceId\") || \"123e4567-e89b-12d3-a456-426614174000\"; // Hentet fra flow kontekst eller hardkodet\n\n// Sett opp en array for å holde transformerte data\nvar dataArray = [];\n\n// Transformere hver av de innkommende verdiene til API-formatet\nvar dataTypes = [\n  { name: \"temperature\", unit: \"Celsius\", dataType: \"numeric\" },\n  { name: \"humidity\", unit: \"Percent\", dataType: \"numeric\" },\n  { name: \"gas_resistance\", unit: \"Ohms\", dataType: \"numeric\" },\n  { name: \"pressure\", unit: \"hPa\", dataType: \"numeric\" }\n];\n\ndataTypes.forEach(function(item) {\n  if (msg.payload[item.name] !== undefined) {\n    dataArray.push({\n      \"DeviceId\": deviceId,\n      \"Value\": msg.payload[item.name],\n      \"Unit\": item.unit,\n      \"DataType\": item.dataType,\n      \"CreatedAt\": new Date().toISOString()\n    });\n  }\n});\n\n// Oppdatere payload med det nye formatet (hvis API-et forventer batch, sender vi hele dataArray)\nmsg.payload = dataArray;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1130,
        "y": 720,
        "wires": [
            [
                "e5b5d2c4948637d8"
            ]
        ]
    },
    {
        "id": "485e5d9a0382ced3",
        "type": "debug",
        "z": "0fa81af8f1d68229",
        "name": "debug 26",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1000,
        "y": 880,
        "wires": []
    },
    {
        "id": "7159b429c9803e3f",
        "type": "debug",
        "z": "0fa81af8f1d68229",
        "name": "debug 27",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 270,
        "y": 360,
        "wires": []
    },
    {
        "id": "920c9fefd84d6048",
        "type": "debug",
        "z": "0fa81af8f1d68229",
        "name": "debug 28",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 360,
        "y": 1120,
        "wires": []
    },
    {
        "id": "8a8d0ef654160fd0",
        "type": "inject",
        "z": "0fa81af8f1d68229",
        "name": "Test data for test",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[   {     \"CreatedAt\": \"2024-11-15T14:30:00Z\",     \"DeviceId\": \"123e4567-e89b-12d3-a456-426614174000\",     \"DataType\": \"temperature\",     \"Value\": 22.5,     \"Unit\": \"Celsius\"   },   {     \"CreatedAt\": \"2024-11-15T15:00:00Z\",     \"DeviceId\": \"123e4567-e89b-12d3-a456-426614174000\",     \"DataType\": \"humidity\",     \"Value\": 55,     \"Unit\": \"Percent\"   },   {     \"CreatedAt\": \"2024-11-15T15:15:00Z\",     \"DeviceId\": \"123e4567-e89b-12d3-a456-426614174000\",     \"DataType\": \"pressure\",     \"Value\": 1013,     \"Unit\": \"hPa\"   },   {     \"CreatedAt\": \"2024-11-15T15:30:00Z\",     \"DeviceId\": \"123e4567-e89b-12d3-a456-426614174001\",     \"DataType\": \"gas_resistance\",     \"Value\": 220,     \"Unit\": \"Ohms\"   } ]",
        "payloadType": "json",
        "x": 840,
        "y": 960,
        "wires": [
            [
                "572d7d0f3c3fdbbe"
            ]
        ]
    },
    {
        "id": "345cca50451e7530",
        "type": "debug",
        "z": "0fa81af8f1d68229",
        "name": "debug 29",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1100,
        "y": 960,
        "wires": []
    },
    {
        "id": "d06de70fd1fedd24",
        "type": "inject",
        "z": "0fa81af8f1d68229",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 900,
        "y": 1160,
        "wires": [
            [
                "abb946281b94774a"
            ]
        ]
    },
    {
        "id": "c8d79812517c4a4f",
        "type": "http request",
        "z": "e421cbd625b1e3bc",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "query",
        "url": "https://localhost:7142/api/Authentication/hub-credentials",
        "tls": "3d52208e47fbe976",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": true,
        "headers": [],
        "x": 430,
        "y": 260,
        "wires": [
            [
                "e0fc12510ec5284d",
                "1305335659c26322"
            ]
        ]
    },
    {
        "id": "b9586633354e7241",
        "type": "inject",
        "z": "e421cbd625b1e3bc",
        "name": "Inject hubId",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"hubId\": \"3857cb35-c52e-45a7-a81f-5a07b5a0b310\"}",
        "payloadType": "json",
        "x": 230,
        "y": 260,
        "wires": [
            [
                "c8d79812517c4a4f"
            ]
        ]
    },
    {
        "id": "e0fc12510ec5284d",
        "type": "debug",
        "z": "e421cbd625b1e3bc",
        "name": "debug 21",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 620,
        "y": 380,
        "wires": []
    },
    {
        "id": "abe935558d0f74c2",
        "type": "comment",
        "z": "e421cbd625b1e3bc",
        "name": "Setup!",
        "info": "On setup!\ngets clientid and secret, needs to be stored!",
        "x": 430,
        "y": 200,
        "wires": []
    },
    {
        "id": "97bb56aeb1fa8a78",
        "type": "catch",
        "z": "e421cbd625b1e3bc",
        "name": "",
        "scope": [
            "c8d79812517c4a4f"
        ],
        "uncaught": false,
        "x": 1070,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "1305335659c26322",
        "type": "function",
        "z": "e421cbd625b1e3bc",
        "name": "Store ClientId & Secret",
        "func": "var clientId = msg.payload.clientId;\nvar clientSecret = msg.payload.clientSecret;\n\nglobal.set(\"ClientId\", clientId);\nglobal.set(\"ClientSecret\", clientSecret);\n\n\nvar message = clientId + \" \" + clientSecret;\n\nmsg.payload = message;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 260,
        "wires": [
            [
                "cc4a814da6d89d86"
            ]
        ]
    },
    {
        "id": "fb32fe0429ff76e3",
        "type": "inject",
        "z": "e421cbd625b1e3bc",
        "name": "Inject clientId & Secret",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"clientId\":\"6960c77b-1866-4623-b9c4-1eaa30202f98\",\"clientSecret\":\"92dd2623-b7d5-418b-be53-ff0217aaf69f\"}",
        "payloadType": "json",
        "x": 140,
        "y": 580,
        "wires": [
            [
                "023816b5addd47c9"
            ]
        ]
    },
    {
        "id": "962d1847d982e886",
        "type": "comment",
        "z": "e421cbd625b1e3bc",
        "name": "Auth Login!",
        "info": "",
        "x": 390,
        "y": 500,
        "wires": []
    },
    {
        "id": "023816b5addd47c9",
        "type": "http request",
        "z": "e421cbd625b1e3bc",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://localhost:7142/api/Authentication/login?isHub=true",
        "tls": "3d52208e47fbe976",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": true,
        "headers": [],
        "x": 490,
        "y": 580,
        "wires": [
            [
                "b6338eba3b35bd96",
                "b220b7376ec8d378"
            ]
        ]
    },
    {
        "id": "b6338eba3b35bd96",
        "type": "debug",
        "z": "e421cbd625b1e3bc",
        "name": "debug 22",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 700,
        "y": 680,
        "wires": []
    },
    {
        "id": "b220b7376ec8d378",
        "type": "function",
        "z": "e421cbd625b1e3bc",
        "name": "Collect accessToken And store",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 580,
        "wires": [
            [
                "0ae895599c3772ef"
            ]
        ]
    },
    {
        "id": "e8519605d6b67fc6",
        "type": "function",
        "z": "e421cbd625b1e3bc",
        "name": "Get ClientId and Secret from file",
        "func": "var client = {\n    \"clientId\": global.get(\"ClientId\"),\n    \"clientSecret\": global.get(\"ClientSecret\")\n};\n\n\n\nmsg.payload = client;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 740,
        "wires": [
            [
                "023816b5addd47c9",
                "2ab47b5a11f36e05"
            ]
        ]
    },
    {
        "id": "2925e5a310867120",
        "type": "inject",
        "z": "e421cbd625b1e3bc",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1170,
        "y": 160,
        "wires": [
            [
                "a23bf65a160161d0"
            ]
        ]
    },
    {
        "id": "eb323feb3e62c3d7",
        "type": "debug",
        "z": "e421cbd625b1e3bc",
        "name": "debug 23",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1620,
        "y": 220,
        "wires": []
    },
    {
        "id": "ae6fd0a08de1b18a",
        "type": "link in",
        "z": "e421cbd625b1e3bc",
        "name": "Auth Login",
        "links": [],
        "x": 65,
        "y": 740,
        "wires": [
            [
                "e8519605d6b67fc6"
            ]
        ]
    },
    {
        "id": "a23bf65a160161d0",
        "type": "link call",
        "z": "e421cbd625b1e3bc",
        "name": "Test",
        "links": [],
        "linkType": "static",
        "timeout": "30",
        "x": 1370,
        "y": 180,
        "wires": [
            [
                "eb323feb3e62c3d7"
            ]
        ]
    },
    {
        "id": "0ae895599c3772ef",
        "type": "link out",
        "z": "e421cbd625b1e3bc",
        "name": "auth Login",
        "mode": "return",
        "links": [],
        "x": 1085,
        "y": 580,
        "wires": []
    },
    {
        "id": "2ab47b5a11f36e05",
        "type": "debug",
        "z": "e421cbd625b1e3bc",
        "name": "debug 24",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 700,
        "y": 800,
        "wires": []
    },
    {
        "id": "cc4a814da6d89d86",
        "type": "debug",
        "z": "e421cbd625b1e3bc",
        "name": "debug 25",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 960,
        "y": 340,
        "wires": []
    },
    {
        "id": "459c36f59cd5fc80",
        "type": "comment",
        "z": "e421cbd625b1e3bc",
        "name": "Example usage to login",
        "info": "",
        "x": 1380,
        "y": 100,
        "wires": []
    }
]
